C $$$$$$
C MHP 10/02 ECOD, ECOD2 NO LONGER USED; OMITTED FROM CALL
      SUBROUTINE CHECKJ(HD,HJMP,HJMSAV,HR,HS,HS2,HV,IMIN,IMAX,IT,LCZ,
C      *                  LPRT,M,DT,ETA2,HI,HJM,IREDO,LOK,LREDO,OMEGA,  ! KC 2025-05-31
     *                  M,DT,ETA2,HI,HJM,IREDO,LOK,LREDO,OMEGA,
     *                  QIW,R0,WSAV,ID,IDM,LOKAD)
C     *                  QIW,R0,WSAV,ID,IDM,ECOD,ECOD2,LOKAD)
      PARAMETER (JSON=5000)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT LOGICAL*4(L)
      COMMON/CCOUT1/NPENV,NPRTMOD,NPRTPT,NPOINT
      COMMON/DIFUS/DTDIF,DJOK,ITDIF1,ITDIF2
      COMMON/ERRMOM/TOLERI
      COMMON/LUOUT/ILAST,IDEBUG,ITRACK,ISHORT,IMILNE,IMODPT,ISTOR,IOWR
      COMMON/OLDROT/WOLD(JSON),HJX(JSON),HIO(JSON),HGO(JSON),R0X(JSON),
     *     ETA2X(JSON)
      COMMON/ROT/WNEW,WALPCZ,ACFPFT,ITFP1,ITFP2,LROT,LINSTB,LWNEW
      COMMON/TEMP2/VES(JSON),VES0(JSON),VSS(JSON),VSS0(JSON),
     *     HLE(JSON),VGSF(JSON),VGSF0(JSON),VMU(JSON)
C MHP 7/93
      COMMON/VARFC/VFC(JSON),LVFC,LDIFAD
C MHP 3/93
      COMMON/QUADD/PHISP(JSON),PHIROT(JSON),PHIDIS(JSON),RAT(JSON)
C MHP 11/94
      COMMON/EGRID/CHI(JSON),ECHI(JSON),ES1(JSON),DCHI,NTOT
      COMMON/DIFAD/ECOD3(JSON),ECOD4(JSON)
      COMMON/DIFAD2/VESA(JSON),VESA0(JSON),VESD(JSON),VESD0(JSON)
      DIMENSION HD(JSON),HJM(JSON),HJMP(JSON),HR(JSON),HS(JSON),
     *   HS2(JSON),LCZ(JSON),ETA2(JSON),HI(JSON),OMEGA(JSON),
     *   QIW(JSON),R0(JSON),HJMSAV(JSON),DELJI(16),IMAXI(16),
     *   ID(JSON),HV(JSON),WSAV(JSON)
C     *   ECOD(JSON),ECOD2(JSON)
      SAVE

C  SR CHECKJ PERFORMS SEVERAL FUNCTIONS.
C  FIRST, IT CHECKS FOR NEGATIVE SPECIFIC ANGULAR MOMENTA.
C  IF THEY ARE ENCOUNTERED, THE TIMESTEP IS CUT.
C  SECOND, IT GUARDS AGAINST REVERSAL OF ANGULAR VELOCITY GRADIENTS.
C  THIRD, IT COMPARES THE RUN OF OMEGA TO THAT FOR THE PREVIOUS ITERATION.
C  IF THE RUN HAS CHANGED BY LITTLE ENOUGH THEN THE DIFFUSION EQUATIONS
C  ARE CONSIDERED CONVERGED.  LOK=T IF THE RUN HAS CONVERGED.
C  FOURTH, IT CORRECTS THE MOMENT OF INERTIA FOR CHANGES IN OMEGA.
C  INPUT VARIABLES:
C  FIFTH, IT WRITES OUT DETAILS OF THE DIFFUSION IF REQUESTED.
C
C  HD : RUN OF LOG DENSITY.
C  HJM : RUN OF SPECIFIC ANGULAR MOMENTUM AFTER THE CURRENT ITERATION.
C  HJMP : RUN OF SPECIFIC ANGULAR MOMENTUM AFTER THE LAST ITERATION
C     FOR THE DIFFUSION COEFFICIENTS.
C  HJMSAV : RUN OF SPECIFIC ANGULAR MOMENTUM AT THE BEGINNING OF THE
C     TIMESTEP.
C  HR : RUN OF LOG RADIUS.
C  HS : RUN OF LOG MASS.
C  HS2 : MASS (UNLOGGED) CONTAINED IN EACH OF THE MODEL POINTS.
C  HV : RUN OF CHARACTERISTIC DIFFUSION VELOCITIES.  IF HV(I)>0 THEN ZONE
C     I IS UNSTABLE WITH RESPECT TO ZONE I-1.
C  IMIN,IMAX : THE FIRST AND LAST ZONES AT WHICH HV IS COMPUTED.
C   *NOTE: IMIN = 2 AND IMAX = NUMBER OF MODEL POINTS UNLESS A SURFACE
C     OR CENTRAL CONVECTION ZONE EXISTS.
C  IT : ITERATION NUMBER.
C  ITDIF2 : MAXIMUM NUMBER OF ITERATIONS ALLOWED IN A GIVEN DIFFUSION
C     TIMESTEP.
C  LCZ : ARRAY SET T IF A ZONE IS CONVECTIVE FOR ANGULAR MOMENTUM
C     REDISTRIBUTION PURPOSES (I.E. INCLUDES OVERSHOOT REGION.)
C  LPRT : FLAG SET T IF MODEL I/O DESIRED.
C  M : NUMBER OF MODEL POINTS.
C
C  OUTPUT VARIABLES:
C
C  DT : DIFFUSION TIMESTEP, WHICH CAN BE CUT IF ERRORS IN THE DIFFUSION
C     ARE DETECTED.
C  ETA2,R0 : AUXILLARY QUANTITIES USED TO FIND OMEGA GIVEN J/M.
C  HI,QIW : RUN OF MOMENTS OF INERTIA AND THEIR DERIVATIVES WITH RESPECT
C  TO OMEGA.
C  HJMP : ARRAY HJMP IS SET EQUAL TO HJM AFTER CONVERGENCE IS CHECKED.
C  IREDO : NUMBER OF TIMES DIFFUSION TIMESTEP HAS BEEN CUT.
C  LOK : FLAG SET T IF DIFFUSION CEOFFICIENTS HAVE CONVERGED.
C  LREDO : FLAG SET T IF A PROBLEM REQUIRES CUTTING THE DIFFUSION TIMESTEP.
C  OMEGA : RUN OF ANGULAR VELOCITY.
C
C  CHECK FOR NEGATIVE J/M.
      LOK = .FALSE.
      LREDO = .FALSE.
      IF(LOKAD)THEN
         LOK = .TRUE.
         LREDO = .FALSE.
      ENDIF
      DO 10 I = 1,M
         IF(HJM(I).LE.0.0D0) THEN
            IREDO = IREDO + 1
C  STOP IF TIMESTEP CUT MORE THAN 3 TIMES.
C            IF(IREDO.GT.3)THEN
            IF(IREDO.GT.0)THEN
               WRITE(6,1000) I
               WRITE(ISHORT,1000) I
 1000          FORMAT(1X,39('>'),39('<')/5X,'ERROR IN SR CHECKJ'/
     *                5X,'NEGATIVE J/M ENCOUNTERED IN ZONE',I5,
     *                ' AND 3 ATTEMPTS AT CUTTING TIMESTEP FAILED'/
     *                'RUN STOPPED')
               STOP
            ELSE
               LREDO = .TRUE.
               DT = 0.5D0*DT
               WRITE(6,1005)IREDO,I
               WRITE(ISHORT,1005)IREDO,I
 1005          FORMAT(5X,'ERROR IN SR CHECKJ'/5X,'TIMESTEP CUT,',1X,
     *                'NUMBER',I5,' DUE TO NEGATIVE J/M IN ZONE',I5)
               GOTO 240
            ENDIF
         ENDIF
   10 CONTINUE
C  CHECK IF THE FRACTIONAL CHANGE IN OMEGA RELATIVE TO THE PREVIOUS
C  ITERATION IS SMALL ENOUGH TO BE CONSIDERED CONVERGED.
C  ALSO LOCATE THE ZONE WHERE THE MAXIMUM CHANGE OCCURS FOR I/O.
      DELJI(IT) = (HJM(1)-HJMP(1))/HJMP(1)
      HJMP(1) = HJM(1)
      IMAXI(IT) = 1
      DO 140 I = 2,M
         DJ = (HJM(I)-HJMP(I))/HJMP(I)
         IF(ABS(DJ).GT.ABS(DELJI(IT))) THEN
            DELJI(IT) = DJ
            IMAXI(IT) = I
         ENDIF
         HJMP(I) = HJM(I)
  140 CONTINUE
      IF(ABS(DELJI(IT)).LE.DJOK) THEN
C         LOK = .FALSE.
C      ELSE
         LOK = .TRUE.
      ENDIF
C  FIND THE RUN OF OMEGA THAT CORRESPONDS TO THE NEW RUN OF J/M.
C  THE MOMENT OF INERTIA IS A FUNCTION OF OMEGA WHICH IS SOLVED
C  ITERATIVELY.  BECAUSE THE ERROR IN THE DIFFUSION IS OF ORDER DJOK,
C  RELAX TOLERANCE FOR MOMENT OF INERTIA ITERATION EXCEPT FOR THE
C  FINAL STEP.
      TOLER0 = TOLERI
      ACC = ACFPFT
      IF(IT.LT.ITDIF2.AND..NOT.LOK)THEN
         TOLERI = MAX(DJOK*1.0D-2,TOLER0)
         ACFPFT = MAX(DJOK*1.0D-2,ACC)
      ENDIF
      CALL GETROT(HD,HJM,HR,HS,HS2,LCZ,M,ETA2,HI,OMEGA,QIW,R0)
      TOLERI = TOLER0
      ACFPFT = ACC
C  SEARCH FOR REVERSAL OF OMEGA GRADIENTS.  IF ONE EXISTS, ENFORCE
C  SOLID-BODY ROTATION IN THE OFFENDING PAIR OF ZONES.
      I = M
      IBOT = M
   20 CONTINUE
C  POSITIVE OMEGA GRADIENT ENCOUNTERED.
      IF(OMEGA(I)-OMEGA(I-1).GT.1.0d0)THEN
C  IF PREVIOUS GRADIENT WAS POSITIVE, LEAVE ALONE.
         IF(WOLD(I)-WOLD(I-1).GT.1.0D-15)THEN
            I = IBOT-1
            IBOT = I
            IF(I.GT.1)THEN
               GOTO 20
            ELSE
               GOTO 130
            ENDIF
         ENDIF
C  SIGN OF D OMEGA/DR HAS CHANGED,INDICATING AN ERROR IN DIFFUSION.
C  MIX THE OFFENDING ZONES TO SOLID BODY ROTATION.
C  ITOP IS THE UPPERMOST UNSTABLE SHELL.
         ITOP = I
C  IF ADJACENT TO A CONVECTION ZONE, MIX THE CONVECTION ZONE AS WELL.
         IF(LCZ(ITOP) .AND. ITOP.LT.M) THEN
            DO 30 J = ITOP + 1,M
               IF(.NOT.LCZ(J)) GOTO 40
   30       CONTINUE
   40       ITOP = J - 1
         ENDIF
C  IBOT IS THE BOTTOM UNSTABLE ZONE. CHECK FOR ADJACENT CZ AS ABOVE.
         IBOT = I - 1
         IF(LCZ(IBOT) .AND. IBOT.GT.1) THEN
            DO 50 J = IBOT - 1,1,-1
               IF(.NOT.LCZ(J)) GOTO 60
   50       CONTINUE
   60       IBOT = J + 1
         ENDIF
C  ENFORCE A SOLID BODY ROTATION CURVE FROM IBOT TO ITOP.
         CALL SOLID(HD,HJM,HR,HS,HS2,IBOT,ITOP,ETA2,HI,
     *              OMEGA,QIW,R0,M)
C  NOW CHECK TO SEE IF THE REDISTRIBUTION HAS GENERATED ANY NEW REVERSALS.
   70    CONTINUE
         LREDO = .FALSE.
C  CHECK FOR GRADIENT REVERSALS BELOW ZONE IBOT.
         IF(IBOT.GT.1) THEN
            IF(OMEGA(IBOT)-OMEGA(IBOT-1).GT.1.0D-15)THEN
               IF(WOLD(IBOT)-WOLD(IBOT-1).LT.1.0D-15)THEN
                  LREDO = .TRUE.
                  IBOT = IBOT - 1
                  IF(LCZ(IBOT) .AND. IBOT.GT.1) THEN
                     DO 80 J = IBOT - 1,1,-1
                        IF(.NOT.LCZ(J)) GOTO 90
   80                CONTINUE
   90                IBOT = J + 1
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
C  CHECK FOR GRADIENT REVERSALS ABOVE ZONE ITOP.
         IF(ITOP.LT.M) THEN
            IF(OMEGA(ITOP+1)-OMEGA(ITOP).GT.1.0D-15)THEN
               IF(WOLD(ITOP+1)-WOLD(ITOP).LT.1.0D-15)THEN
                  LREDO = .TRUE.
                  ITOP = ITOP+1
                  IF(LCZ(ITOP) .AND. ITOP.LT.M) THEN
                     DO 100 J = ITOP+1,M
                        IF(.NOT.LCZ(J)) GOTO 110
  100                CONTINUE
  110                ITOP = J - 1
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
C  IF LREDO=T THEN THE REDISTRIBUTION OF ANGULAR MOMENTUM IN A REVERSED
C  REGION HAS EFFECTED A CHANGE IN OMEGA AT ONE OF BOTH OF THE BOUNDARIES
C  THAT HAS CAUSED A NEW GRADIENT REVERSAL AT THE BOUNDARY.
         IF(LREDO) THEN
            CALL SOLID(HD,HJM,HR,HS,HS2,IBOT,ITOP,ETA2,HI,
     *                 OMEGA,QIW,R0,M)
            GOTO 70
         ENDIF
         IF(IT.EQ.ITDIF2.OR.LOK)WRITE(*,120)IBOT,ITOP,IT
  120    FORMAT(5X,'OMEGA GRADIENT REVERSAL BETWEEN ZONES ',
     *          I5,' AND ',I5,' ITERATION ',I5)
      ENDIF
  130 CONTINUE
C  RETURN FOR NEXT ZONE.
      I = IBOT - 1
      IBOT = I
      IF(I.GT.1) GOTO 20
C  I/O FOR END OF DIFFUSION STEP.
      IF(IT.EQ.ITDIF2.OR.LOK)THEN
C  FIND MAXIMUM FRACTIONAL CHANGE IN J/M OVER TIMESTEP.
         DELJ = 0.0D0
         IJMAX = 0
C MHP 10/02 ICRIT REMOVED
C         IF(ICRIT.EQ.0)THEN
           II = 1
C         ELSE
C           II = ICRIT
C         ENDIF
         DO 150 I = II,M
            DJ = (HJM(I)-HJMSAV(I))/HJMSAV(I)
            IF(ABS(DJ).GT.ABS(DELJ)) THEN
               DELJ = DJ
               IJMAX = I
            ENDIF
  150    CONTINUE
         IF(.NOT.LOKAD)THEN
            WRITE(*,160)DELJ,IJMAX,(DELJI(J),IMAXI(J),J=1,IT)
  160       FORMAT(' MAX D(J/M)/(J/M)',1PE12.3,' AT PT.',I5,
     *      ' BY ITERATION'/5(1X,E11.3,I4))
         ENDIF
C
C G Somers 11/14, I AM TURNING OFF THE OUTPUT TO THE .FULL FILE.
C THE AM CHANGES WILL NOT BE RECORDED, BUT THIS CAN BE TRIVIALLY
C EXTRACTED FROM THE EXTENDED .STORE FILE.
C
C SKIP OUTPUT IF NOT DESIRED.
C         IF(.NOT.LPRT)GOTO 240
         IF(.TRUE.)GOTO 240
C G Somers END
C
C  IF NPRTPT IS SET TO A LARGE NUMBER, SKIP DETAILED OUTPUT.
         IF(NPRTPT.GT.M)GOTO 240
         WRITE(IMODPT,170)
  170 FORMAT(' SHELL',3X,'OMEGA',5X,'DEL OMEGA',6X,'J/M',7X,'DEL J/M')
C  DETERMINE WHICH SHELLS TO PRINT.
C  FIRST POINT ALWAYS PRINTED OUT.
         ID(1) = 1
         IDM = 2
         IBEG = MAX(IMIN,NPRTPT)
         IEND = MIN(IMAX,INT(IMAX/NPRTPT)*NPRTPT)
C PRINT OUT EVERY NPRTPT POINTS. WHEN V=0, SKIP POINTS.
         DO 180 J = IBEG,IEND,NPRTPT
C            IF(HV(J).EQ.0.0D0)GOTO 180
            ID(IDM) = J
            IDM = IDM + 1
  180    CONTINUE
C OUTERMOST MODEL POINT (OR POINT AT BASE OF SURFACE C.Z.)ALWAYS PRINTED.
         IF(ID(IDM-1).NE.IMAX)THEN
            ID(IDM) = IMAX
         ELSE
            IDM = IDM-1
         ENDIF
C  I/O CONCERNING ANGULAR MOMENTUM TRANSPORT.
         DO 200 I=1,IDM
            WRITE(IMODPT,190)ID(I),OMEGA(ID(I)),OMEGA(ID(I))-
     *      WSAV(ID(I)),HJM(ID(I)),HJM(ID(I))-HJMSAV(ID(I))
  190 FORMAT(1X,I5,1P4E12.3)
  200    CONTINUE
C  I/O CONCERNING DIFFUSION VELOCITIES AND SCALE LENGTHS.
         WRITE(IMODPT,210)
  210 FORMAT(1X,'SHELL',4X,'VES0',9X,'VES',7X,'VGSF0',8X,'VGSF',9X,
     *       'VSS',9X,'RAT',8X,'VTOT',7X,'LENGTH',8X,'VMU')
         DO 230 I = 1,IDM
            WRITE(IMODPT,220)ID(I),VES0(ID(I)),VES(ID(I)),VGSF0(ID(I)),
     *      VGSF(ID(I)),VSS(ID(I)),RAT(ID(I)),HV(ID(I)),HLE(ID(I)),
     *      VMU(ID(I))
  220 FORMAT(1X,I5,1P10E12.3)
  230    CONTINUE
         IF(LDIFAD)THEN
C            DO I = 1,IDM
C               WRITE(IMODPT,221)ID(I),VES(ID(I)),VESA(ID(I)),
C     *         VESD(ID(I)),
C     *         ECOD(ID(I)),ECOD2(ID(I)),ECOD3(ID(I)),ECOD4(ID(I))
C 221           FORMAT(1X,I5,1P7E12.3)
C            END DO
            IF(IDM.EQ.NTOT)THEN
            DO I = 1,IDM
               WRITE(IMODPT,221)I,CHI(I),VES(I),VESA(I),
     *         VESD(I),ECHI(I),ECOD3(I),ECOD4(I)
 221           FORMAT(1X,I5,1P7E12.3)
            END DO
            ELSE IF(IDM.LT.NTOT)THEN
            DO I = 1,IDM
               WRITE(IMODPT,221)I,CHI(I),VES(I),VESA(I),
     *         VESD(I),ECHI(I),ECOD3(I),ECOD4(I)
            END DO
            DO I = IDM+1,NTOT
               WRITE(IMODPT,222)I,ECHI(I),ECOD3(I),ECOD4(I)
 222           FORMAT(1X,I5,48X,1P3E12.3)
            END DO
            ELSE
            DO I = 1,NTOT
               WRITE(IMODPT,221)I,CHI(I),VES(I),VESA(I),
     *         VESD(I),ECHI(I),ECOD3(I),ECOD4(I)
            END DO
            DO I = NTOT+1,IDM
               WRITE(IMODPT,223)I,CHI(I),VES(I),VESA(I),
     *         VESD(I)
 223           FORMAT(1X,I5,1P4E12.3)
            END DO
            ENDIF
         ENDIF
      ENDIF
  240 CONTINUE
      RETURN
      END
