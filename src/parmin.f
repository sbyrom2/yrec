C
C
C$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
C PARMIN
C$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
      SUBROUTINE PARMIN(FALEX06,FALLARD,FATM,FFERMI,FKUR,FKUR2,FLAOL,
     * FLAOL2,FLIV95,FLLDAT,FMHD1,FMHD2,FMHD3,FMHD4,FMHD5,FMHD6,FMHD7,
     * FMHD8,FOPAL2,FPATM,FPENV,FPMOD,FPUREZ,FSCVH,FSCVHE,FSCVZ,
     * OPECALEX)

      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT LOGICAL*4(L)
      IMPLICIT INTEGER*4(I,J,K,M,N)
C PARAMETERS NT AND NG FOR TABULATED SURFACE PRESSURES.
      PARAMETER(NT=57,NG=11)
C JNT 6/2014 ADD NTC AND NGC FOR KURUCZ/CASTELLI SURFACE PRESSURES
      PARAMETER(NTC=76,NGC=11)
C PARAMETERS NTA AND NGA FOR TABULATED ALLARD MODEL SURFACE PRESSURES.
      PARAMETER(NTA=54,NGA=5)
      PARAMETER (NTS=63, NPS=76)
      PARAMETER (JSON=5000)

      REAL*8 OLAOL,OXA,OT,ORHO,TOLLAOL
      CHARACTER*256 FLAOL, FPUREZ
      CHARACTER*256 FLAOL2, FOPAL2, FKUR2
      CHARACTER*256 DESCRIP(2)
      CHARACTER*3 ANEWCP,ATMP,AID(12)
C MHP 10/24 MIXTURE TYPE FOR NEW HEAVY ELEMENT MIXTURE MACHINERY
      CHARACTER*8 AMIX,AISO,AMIXT(4)
      REAL*8 ZXMIXT(4),FRAC_CT(4),FRAC_NT(4),FRAC_OT(4)
      DIMENSION KINDRN(50),RSCLM(50),RSCLX(50),RSCLZ(50),
     1          RSCLCM(50)
      CHARACTER*256 FISO
      CHARACTER*256 FATM
      CHARACTER*256 FSTCH
      CHARACTER*256 FALLARD,FSCVH,FSCVHE,FSCVZ
      CHARACTER*256 FLAST, FFIRST, FRUN, FSTAND, FFERMI,
     1    FDEBUG, FTRACK, FSHORT, FMILNE, FMODPT,
     2    FSTOR, FPMOD, FPENV, FPATM, FDYN,
     3    FLLDAT, FSNU, FSCOMP, FKUR,
     4    FMHD1, FMHD2, FMHD3, FMHD4, FMHD5, FMHD6, FMHD7, FMHD8
      CHARACTER*256 FMONTE1,FMONTE2
C JVS 02/11 PARAMETERS for command line yrec input file specification
C      and extra acoustic depth (calcad.f) output files
C       CHARACTER*256 FCLCD, YREC1, YREC2, FACAT, FJLAST,FJVS, FJENT, FJDEL
      CHARACTER*256 FCLCD, YREC1, YREC2, FJLAST
      CHARACTER*256 EMPTY
      INTEGER ICLCD, MRK, IACAT, IJLAST, IJVS, IJENT, IJDEL
C JVS END
      COMMON/VNEWCB/VNEW(12)
      COMMON/LUOUT/ILAST,IDEBUG,ITRACK,ISHORT,IMILNE,IMODPT,ISTOR,IOWR
      COMMON/LUNUM/IFIRST, IRUN, ISTAND, IFERMI,
     1    IOPMOD, IOPENV, IOPATM, IDYN,
     2    ILLDAT, ISNU, ISCOMP, IKUR
C MHP 8/25 Removed file names from common block
C      COMMON/LUFNM/ FLAST, FFIRST, FRUN, FSTAND, FFERMI,
C     1    FDEBUG, FTRACK, FSHORT, FMILNE, FMODPT,
C     2    FSTOR, FPMOD, FPENV, FPATM, FDYN,
C     3    FLLDAT, FSNU, FSCOMP, FKUR,
C     4    FMHD1, FMHD2, FMHD3, FMHD4, FMHD5, FMHD6, FMHD7, FMHD8
C MHP 6/98
      COMMON/IOMONTE/FMONTE1,FMONTE2,IMONTE1,IMONTE2
      COMMON/DESC/DESCRIP
      COMMON/CCOUT/LSTORE,LSTATM,LSTENV,LSTMOD,LSTPHYS,LSTROT,LSCRIB,LSTCH
      COMMON/CCOUT1/NPENV,NPRTMOD,NPRTPT,NPOINT
      COMMON/CCOUT2/LDEBUG,LCORR,LMILNE,LTRACK,LSTPCH
      COMMON/CENV/TRIDT,TRIDL,SENV0,LSENV0,LNEW0
      COMMON /CKIND/RESCAL(4,50),NMODLS(50),IRESCA(50),LFIRST(50),
     1     NUMRUN
      COMMON/COMP/XENV,ZENV,ZENVM,AMUENV,FXENV(12),XNEW,ZNEW,STOTAL,
     *     SENV
      COMMON/CONST/CLSUN,CLSUNL,CLNSUN,CMSUN,CMSUNL,CRSUN,CRSUNL,CMBOL
      COMMON/CONST3/CDELRL,CMIXL,CMIXL2,CMIXL3,CLNDP,CSECYR
      COMMON/CTLIM/ATIME(14),TCUT(5),TSCUT,TENV0,TENV1,TENV,TGCUT
      COMMON/CT2/DTWIND
      COMMON/CT3/LPTIME
      COMMON/CTOL/HTOLER(5,2),FCORR0,FCORRI,FCORR,HPTTOL(12),
     1     NITER1,NITER2,NITER3
      COMMON/DIFUS/DTDIF,DJOK,ITDIF1,ITDIF2
C 7/91 LSEMIC (SEMI-CONVECTION) ADDED TO COMMON BLOCK.
      COMMON/DPMIX/DPENV,ALPHAC,ALPHAE,ALPHAM,BETAC,IOV1,IOV2,
     *      IOVIM, LOVSTC, LOVSTE, LOVSTM, LSEMIC, LADOV, LOVMAX
      COMMON/ENVGEN/ATMSTP,ENVSTP,LENVG
      COMMON/FLAG/LEXCOM
      COMMON/HEFLSH/LKUTHE
      COMMON/INTATM/ATMERR,ATMD0,ATMBEG,ATMMIN,ATMMAX
      COMMON/INTENV/ENVERR,ENVBEG,ENVMIN,ENVMAX
      COMMON/INTPAR/STOLR0,IMAX,NUSE
      COMMON/LABEL/XENV0,ZENV0
C MHP 10/24 ADDED NEW CONTROLS FOR ALTERING THE CNO MASS FRACTIONS
C ISOTOPIC RATIOS(C,N,O) AND D/HE3/LI/BE/B ABUNDANCES.
C THESE CONTROLS ONLY ALTER THE MIXTURE IN THE STARTING MODEL AND ONLY
C IF THE MODEL IS CHEMICALLY UNEVOLVED. POSTPROCESSING TOOLS SHOULD BE USED FOR THE
C CORE HE BURNING PHASE.
      COMMON/NEWCMP/XNEWCP,INEWCP,LNEWCP,LREL
c      COMMON/NEWCMP/XNEWCP,INEWCP,LNEWCP,LREL,ANEWCP
      COMMON/NEWMX/ISETMIX,ISETISO,LMIXTURE,LISOTOPE,FRAC_C,FRAC_N,
     * FRAC_O,R12_13,R14_15,R16_17,R16_18,ZXMIX,
     * XH2_INI,XHE3_INI,XLI6_INI,XLI7_INI,XBE9_INI,XB10_INI,XB11_INI
      COMMON/OPTAB/OPTOL,ZSI,IDT,IDD(4)
      COMMON/ROT/WNEW,WALPCZ,ACFPFT,ITFP1,ITFP2,LROT,LINSTB,LWNEW
C MHP 10/24 ADDED STOP CRITERIA FOR CENTRAL H,D,AND HE4
      COMMON/SETT/ENDAGE(50),SETDT(50),LENDAG(50),LSETDT(50),
     * END_DCEN(50),END_XCEN(50),END_YCEN(50)
      COMMON/VMULT/FW,FC,FO,FES,FGSF,FMU,FSS,RCRIT
C DBG 7/92 COMMON BLOCK ADDED TO COMPUTE DEBYE-HUCKEL CORRECTION.
      COMMON/DEBHU/CDH,ETADH0,ETADH1,ZDH(18),XXDH,
     1             YYDH,ZZDH,DHNUE(18),LDH
C MHP 10/90 DIFFERENT FC FOR DIFFERENT MECHANISMS INTRODUCED.
C ALSO OPTION FOR SMOOTHING VELOCITIES FOR LENGTH SCALE CALCULATIONS.
      COMMON/VMULT2/FESC,FSSC,FGSFC,IES,IGSF,IMU
C MHP 5/90 ADD COMMON BLOCK FOR GRAVITATIONAL SETTLING.
      COMMON/GRAVST/GRTOL,ILAMBDA,NITER_GS,LDIFY
C MHP 5/90 ADD COMMON BLOCK FOR NEW TREATMENT OF
C ENTROPY TERM(LNEWS),AND THE CALCULATION
C OF SOLAR NEUTRINOS(LSNU).ALSO ALLOWS A FOURTH LEVEL OF ITERATION(NITER4).
      COMMON/NEWENG/NITER4,LNEWS,LSNU
C MHP 7/91 ADDED COMMON BLOCK FOR NUMERICAL PARAMETERS IN KEMCOM.
      COMMON/BURTOL/CMIN,ABSTOL,RELTOL,KEMMAX
C YCK >>> OPAL95
      CHARACTER*256 FLIV95
C MHP 8/25 Removed character file names from common block
      COMMON /LOPAL95/ILIV95
C <<< YCK
C MHP 6/90 ADDITIONAL COMMON BLOCK FOR SETTLING.
      COMMON/GRAVS2/DT_GS,XMIN,YMIN,LTHOULFIT
      COMMON/GRAVS3/FGRY,FGRZ,LTHOUL,LDIFZ
C GES 6/15 NEW COMMON BLOCK FOR LIGHT DIFFUSION AND NEW DIFF ROUTINE.
      COMMON/GRAVS4/LNEWDIF,LDIFLI
C DBG PULSE
      COMMON/PULSE/XMSOL,LPULSE,IPVER
C DBG PULSE OUT 7/92
C VARIABLES USED TO CONTROL OUTPUT OF PULSATION MODELS.  MODEL
C OUTPUT AFTER HAS TRAVELED POMAX IN HR DIAGRAM
C LPOUT AND POMAX ADDED TO CONTROL COMMON BLOCK, REST IN PHYSICS
      COMMON /PO/POA,POB,POC,POMAX,LPOUT
      COMMON/TRACK/ITRVER
      COMMON/ATMOS/HRAS,KTTAU,KTTAU0,LTTAU
      COMMON/MHD/LMHD,IOMHD1,IOMHD2,IOMHD3,IOMHD4,IOMHD5,IOMHD6,
     1           IOMHD7, IOMHD8
      COMMON/CORE/LCORE,MCORE,FCORE
C DBGLAOL
C MHP 8/25 Removed character file names from common block
      COMMON/NWLAOL/OLAOL(12,104,52),OXA(12),OT(52),ORHO(104),TOLLAOL,
     *  IOLAOL, NUMOFXYZ, NUMRHO, NUMT, LLAOL, LPUREZ, IOPUREZ
C MHP 8/25 Removed character file names from common block
C DBG 11/11/91 ADDED TO NAMELIST
      COMMON/CHRONE/LRWSH, LISO, IISO
C DBG 1/92 let XENV0, ZENV0, and CMIXL be arrays so can change during
C a set of runs.
      COMMON /NEWXYM/XENV0A(50),ZENV0A(50),CMIXLA(50),LSENV0A(50),
     * SENV0A(50)
C MHP 8/25 Removed file names from common block
C JMH 8/18/91
C      COMMON/ATMOS2/ATMPL(NT,NG),ATMTL(NT),
C     *              ATMGL(NG),ATMZ,IOATM,FATM
      COMMON/ATMOS2/ATMPL(NT,NG),ATMTL(NT),
     *              ATMGL(NG),ATMZ,IOATM
C JMH
C JNT 6/14 SAME AS ATMOS2 BUT FOR KURUCZ/CASTELLI2004 ATMOSPHERES
      COMMON/ATMOS2C/ATMPLC(NTC,NGC),ATMTLC(NTC),
     *              ATMGLC(NGC)
C 9/06 GN --- New neutrino loss common block
C KC 2025-05-30 reordered common block elements
C       COMMON/NULOSS/LNULOS1,DSNUDT,DSNUDD
      COMMON/NULOSS/DSNUDT,DSNUDD,LNULOS1
C MHP 1/93 ADD OPTION TO AUTOMATICALLY CALIBRATE SOLAR MODEL.
C      COMMON/CALS2/TOLL,TOLR,LCALS
C MHP 6/13 ADD OPTION TO CALIBRATE SOLAR Z/X, SOLAR Z/X, SOLAR AGE
      COMMON/CALS2/TOLL,TOLR,TOLZ,LCALS,LCALSOLZX,CALSOLZX,CALSOLAGE
C DBG 7/92 ADDED DEBYE HUCKEL PARAMETERS TO NAMELIST, ETADH0, ETADH1

C MHP 8/25 Removed character file names from common block
C DBG 4/94 ADDED PARAMETERS TO CONTROL RAMP Z IN CORE
      COMMON/ZRAMP/RSCLZC(50), RSCLZM1(50), RSCLZM2(50),
     *             IOLAOL2, IOOPAL2, NK,
     *             LZRAMP
C IF LZRAMP=T THEN RESCALE Z IN CORE FROM RSCLZC VALUE TO ZENV VALUE
C WHERE CHANGE IS LINEAR. Z MEETS ZENV AT RSCLZM.
C DBG 12/94 ADDED CALIBRATE STELLAR MODEL
      COMMON/CALSTAR/XLS, XLSTOL,  STEFF, SR,
     1      BLI, ALRI, AGER, BLR, BLRP, AGEI,
     2      LSTAR, LTEFF, LPASSR,LCALST
C OPAL eos
      CHARACTER*256 FOPALE,FOPALE01,FcondOpacP,FOPALE06
C KC 2025-05-30 reordered common block elements
C       COMMON/OPALEOS/FOPALE,LOPALE,IOPALE,FOPALE01,LOPALE01,
C      x  FOPALE06,LOPALE06,LNumDeriv
C MHP 8/25 Remove file names from common blocks
      COMMON/OPALEOS/LOPALE,IOPALE,lopale01,lopale06,lNumDeriv
C OPACITY COMMON BLOCKS - modified 3/09
      COMMON /NEWOPAC/ZLAOL1,ZLAOL2,ZOPAL1,ZOPAL2, ZOPAL951,
     +       ZALEX1, ZKUR1, ZKUR2,TMOLMIN,TMOLMAX,LALEX06,
     +       LLAOL89,LOPAL92,LOPAL95,LKUR90,LALEX95,L2Z
C MHP 8/25 Removed character file names from common block
      COMMON /MISCOPAC/IKUR2,IcondOpacP,LcondOpacP
C     9/95 Alex low T opacity tables
      CHARACTER*256 OPECALEX(7)
      CHARACTER*256 FALEX06
C MHP 8/25 Removed all character strings from common blocks
      COMMON /ALEXO/IALXO
C 2006 version added 3/09
C MHP 8/25 Removed character file names from common block
      COMMON /ALEX06/IALEX06
      COMMON /ALEXMIX/XALEX,ZALEX
      COMMON/VARFC/VFC(JSON),LVFC,LDIFAD
      COMMON/NOTRAN/LNOJ
C 8/96 MHP NEW COMMON BLOCK FOR NUCLEAR REACTION RATES.
C      COMMON/CROSS/SSTANDARD(17)
C MHP 9/14 EXTENDED TO PERMIT USER RESCALING OF DERIVATES OF REACTION
C RATES AND THE BRANCHING RATION FOR N15
      COMMON/CROSS/SSTANDARD(17),QS0E(8),QQS0EE(8),FO16,FC12,LNEWNUC
      COMMON/NEWCROSS/S0_1_1,S0_3_3,S0_3_4,S0_1_12,S0_1_13,S0_1_14,
     *  S0_1_16,S0_PEP,S0_1_BE7E,S0_1_BE7P,S0_HEP,S0_1_15_C12ALP,
     *  S0_1_15_O16,S0P_1_1,S0P_3_3,S0P_3_4,S0P_1_12,S0P_1_13,S0P_1_14,
     *  S0P_1_16,S0PP_1_12,S0PP_1_13,S0PP_1_16,S0P_1_BE7P,S0PP_1_BE7P
C 10/14 MHP NEW PARAMETERS - REPLACING DTDIF,DTWIND, HPTTOL & ATIME VECTORS
C KC 2025-05-30 reordered common block elements
C       COMMON/NEWPARAM/FLAG_DX,FLAG_DW,FLAG_DZ,LSTRUCT_TIME,
      COMMON/NEWPARAM/FLAG_DX,FLAG_DW,FLAG_DZ,
     * TIME_CORE_MIN,TIME_DL,TIME_DP,TIME_DR,TIME_DT,TIME_DW_GLOBAL,
     * TIME_DW_MIX,TIME_DX_CORE_FRAC,TIME_DX_CORE_TOT,TIME_DX_SHELL,
     * TIME_DX_TOTAL,TIME_DY_CORE_FRAC,TIME_DY_CORE_TOT,TIME_DY_SHELL,
     * TIME_DY_TOTAL,TOL_CZBASE_FINE_WIDTH,TOL_DL_MAX,TOL_DM_MAX,
     * TOL_DM_MIN,TOL_DP_CORE_MAX,TOL_DP_CZBASE_MAX,TOL_DP_ENV_MAX,
C      * TOL_DX_MAX,TOL_DZ_MAX,TIME_MAX_DT_FRAC,LNEWVARS
     * TOL_DX_MAX,TOL_DZ_MAX,TIME_MAX_DT_FRAC,LSTRUCT_TIME,LNEWVARS
C MHP 6/96 MONTE CARLO OPTION FOR SNUS ADDED.
      COMMON/MONTE/LMONTE,IMBEG,IMEND
C MHP  5/97 ADDED COMMON BLOCK FOR SCV EOS TABLES
      COMMON/SCVEOS/TLOGX(NTS),TABLEX(NTS,NPS,12),
     *TABLEY(NTS,NPS,12),SMIX(NTS,NPS),TABLEZ(NTS,NPS,13),
     *TABLENV(NTS,NPS,12),NPTSX(NTS),LSCV,IDTT,IDP
C MHP 8/25 Removed file names from common block
      COMMON/SCV2/ISCVH,ISCVHE,ISCVZ
C      COMMON/SCV2/FSCVH,FSCVHE,FSCVZ,ISCVH,ISCVHE,ISCVZ
C LLP 9/08 New ALATM03 COMMON to share info with Allard atmosphere routines
      COMMON /ALATM03/ ALATM_FeH,ALATM_Alpha,LALTPTau100,  ! Shared: ALFILEIN,
     x       IOATMA                                         ! ALSURFP and PARMIN
C MHP 8/25 Removed character file names from common block
      COMMON /ALATM04/ DUMMY1,DUMMY2,DUMMY3,DUMMY4
C MHP 9/94 ADDED DISK LOCKING OPTION - FLAG, TIME OVER WHICH LOCKING
C IS ENFORCED, AND PERIOD AT WHICH LOCKING IS SET ARE OPTIONS.
      COMMON/DISK/SAGE,TDISK,PDISK,LDISK
      COMMON/WEAK/WEAKSCREENING
C MHP 3/99 ADDED FLAG TO TREAT THE ENTIRE STAR AS 'CONVECTIVE'
C FOR ANGULAR MOMENTUM PURPOSES.
      COMMON/SBROT/LSOLID
C MHP 10/01 ADDED COMMON BLOCK FOR MASS LOSS/ACCRETION
      COMMON/MASSCHG/DMDT0,FCZDMDT,FTOTDMDT,COMPACC(15),CREIM,
     *               LREIMER,LMDOT
C mhp 8/10 added option to scale mass loss rate by rotation; requires rotating model
C MHP 2/12 MOVED INTO PMM TORQUE MODEL, RETAINED MDOT SWITCH
C KC 2025-05-30 reordered common block elements
C      COMMON/MASSCHG3/LSOLWIND,DMSUN,DMWSUN,DMWMAX
C      COMMON/MASSCHG3/DMSUN,DMWSUN,DMWMAX,LSOLWIND
CFD 10/09 ADDED COMMON BLOCK FOR EXTRA MIXING. IT MIMIC SOME MIXING BY AFFECTING
C        THE SETTLING COEFFICIENT DIRECTLY (in setup_grsett.f)
      COMMON/CMIXING/CSTMIXING, CSTDIFFMIX
C JVS 02/11 Acoustic depth calc common block
C KC 2025-05-30 reordered common block elements
C       COMMON/ACDPTH/TAUCZN,DELADJ(JSON),TAUHE, TNORM, TCZ, WHE, ICLCD,
      COMMON/ACDPTH/TAUCZN,DELADJ(JSON),TAUHE, TNORM, TCZ, WHE,
     *ACATMR(JSON), ACATMD(JSON), ACATMP(JSON), ACATMT(JSON),TATMOS,
C      *LCLCD, AGEOUT(5), IACAT, IJLAST, LJLAST, LJWRT, LADON,LAOLY, IJVS,
     *AGEOUT(5), LCLCD, ICLCD, IACAT, IJLAST, LJLAST, LJWRT, LADON, LAOLY, IJVS,
     *IJENT, IJDEL, LACOUT
C JVS END
C JVS 04/14 Common block for additional timestep governors
      COMMON/GOVS/LTRIST
C MHP 02/12 NEW PARAMETERIZATION OF ANGULAR MOMENTUM AND MASS LOSS
C FROM MAGNETIZED SOLAR-LIKE WINDS
      CHARACTER*3 AWIND
C KC 2025-05-30 reordered common block elements
C       COMMON/PMMWIND/AWIND,LMWIND,LROSSBY,LBSCALE,PMMA,PMMB,PMMC,PMMD,PMMM,
C      *         PMMJD,PMMMD,PMMSOLP,PMMSOLW,PMMSOLTAU	
      COMMON/PMMWIND/PMMA,PMMB,PMMC,PMMD,PMMM,PMMJD,PMMMD,PMMSOLP,PMMSOLW,PMMSOLTAU,
     *         LMWIND,LROSSBY,LBSCALE,AWIND
C MHP 8/17 ADDED EXCEN, C_2 TO COMMON BLOCK FOR MATT ET AL. 2012 CENT. TERM
      COMMON/CWIND/WMAX,EXMD,EXW,EXTAU,EXR,EXM,EXL,EXPR,CONSTFACTOR,
     *             STRUCTFACTOR,EXCEN,C_2,LJDOT0
C CREATE A NEW COMMON BLOCK FOR OVERTURN TIMESCALE THINGS (PPHOT,TAUCZ,LNEWTCZ)
      COMMON/OVRTRN/LNEWTCZ,LCALCENV,TAUCZ,TAUCZ0,PPHOT,PPHOT0,FRACSTEP
C MHP 02/12 PERMIT CONSTANT DIFFUSION COEFFICIENT
C KC 2025-05-30 reordered common block elements
C       COMMON/MAG/LCODM,CODM
      COMMON/MAG/CODM,LCODM
C
C G Somers 6/14 ALLOW VARIABLE LI/BE DESTRUCTION CROSS SECTIONS
      COMMON/XSECT/XSLI6,XSLI7,XSBE91,XSBE92,XSBE93,
     *LXLI6,LXLI7,LXBE91,LXBE92,LXBE93
      COMMON/BURNSCS/SLI6,SLI7,SBE91,SBE92,SBE93
      COMMON/SPOTS/SPOTF,SPOTX,LSDEPTH
C G Somers END
      SAVE
C
C SPLIT NAMELIST INTO TWO: CONTROL and PHYSICS
      NAMELIST /CONTROL/
     *   CMIXLA, CALSOLAGE, CALSOLZX,
     *   DESCRIP,
     *   ENDAGE,
     *   FLAOL, FPUREZ,FLAOL2, FOPAL2,
     *   FLAST, FFIRST, FFERMI, FDEBUG, FTRACK, FSHORT, FSTCH,
     *   FMILNE, FMODPT, FSTOR, FPMOD, FPATM, FPENV,
     *   FDYN, FLLDAT, FSNU, FSCOMP, FKUR, FMHD1,
     *   FMHD2, FMHD3, FMHD4, FMHD5, FMHD6, FMHD7, FMHD8, FISO, FATM,
     *   FKUR2, FALLARD, FSCVH, FSCVHE, FSCVZ, FOPALE, FLIV95,
     *   FMONTE1,FMONTE2,
     *   IPVER, ITRVER,
     *   KINDRN,
     *   LDEBUG, LCORR, LMILNE, LTRACK, LSTORE, LFIRST,
     *   LSTPCH, LSCRIB, LSTCH,
C G Somers 11/14
     *   LSTATM,LSTENV,LSTMOD,LSTPHYS,LSTROT,
C G Somers END
     *   LPULSE, LZRAMP, LTEFF, LCALST, LPUREZ,
C MHP 9/24 add LCALSOLZX to namelist
     *   LISO, LRWSH, LSENV0A, LPOUT,LCALS,LCALSOLZX,
     *   LLAOL89,LOPAL92,LOPAL95,LKUR90,LALEX95,
     *   NPOINT,
     *   NPENV, NPRTMOD, NPRTPT, NUMRUN, NMODLS,
     *   OPECALEX,
     *   POA, POB, POC, POMAX,
     *   RSCLM, RSCLX, RSCLZ, RSCLCM, RSCLZC, RSCLZM1, RSCLZM2,
     *   SETDT, SENV0A,STEFF,SR,
     *   TOLR, TOLL,TOLZ,
     *   XENV0A, XLS, XLSTOL,
     *   ZENV0A,
     *   ZLAOL1,ZLAOL2,ZOPAL1,ZOPAL2, ZOPAL951,
     *   ZOPAL952, ZALEX1, ZALEX2, ZKUR1, ZKUR2,
     *     FOPALE01,FcondOpacP,FOPALE06,FALEX06,LALEX06,
C MHP 10/24 ADDED END_DCEN,END_XCEN,END_YCEN VECTORS TO NML1, USED IN MAIN
C MHP 10/24 ADDED HEAVY ELEMENT MIXTURE CONTROLS TO NML1,USED IN STARIN
     * END_DCEN,END_XCEN,END_YCEN,ISETMIX,ISETISO,
     * AMIX,AISO,FRAC_C,FRAC_N,FRAC_O,R12_13,R14_15,R16_17,R16_18,ZXMIX,
     * XH2_INI,XHE3_INI,XLI6_INI,XLI7_INI,XBE9_INI,XB10_INI,XB11_INI
C
      NAMELIST /PHYSICS/
     *   ATMMIN, ATMBEG, ATMERR, ATMMAX, ATMD0, ANEWCP, ATMP, ACFPFT,
     *   ATIME, ALPHAC, ALPHAE, ALFA, ALPHAM, ATMSTP, ABSTOL, BETAC,
     *   CMIN, CLSUN, CRSUN,
     *   DPENV, DTDIF, DTWIND, DJOK, DT_GS,
     *   ENVERR, ENVMAX, ENVMIN, ENVBEG, ENVSTP,ETADH0,ETADH1,
     *   FCORR0, FCORRI, FK,  FW, FC, FO, FMU, FES,
     *   FCORE, FGSF, FSS, FESC, FSSC, FGSFC, FGRY, FGRZ,
     *   GRTOL,
     *   HTOLER, HPTTOL,
     *   ITFP1, ITFP2, IMAX, ITDIF1, ITDIF2, IES, IGSF, IMU, ILAMBDA,
     *   KTTAU, KEMMAX,
     *   LVFC, LDIFAD, LNOJ, LNEWDIF, LDIFY, LDIFZ, LDIFLI, LSNU, LDH,
     *   LNEWCP, LKUTHE, LOVSTC, LOVSTE, LOVSTM, LOVMAX,
     *   LEXCOM, LROT, LNEW0, LINSTB, LWNEW, LJDOT0, LPTIME,LADOV,LTRIST,
     *   LENVG, LNULOS1, LTHOUL, LTHOULFIT,
     *   LOPALE, LMHD, LCORE, LSEMIC, LNEWS,
     *   MCORE,
     *   NITER1, NITER2, NITER3, NITER4, NUSE, NITER_GS,
     *   OPTOL,
     *   RCRIT, RELTOL,
     *   STOLR0,
     *   TCUT, TSCUT, TENV0, TENV1, TGCUT, TRIDT, TRIDL,
     *   TOLLAOL,
     *   VNEW,
     *   WALPCZ, WNEW, WEAKSCREENING,
     *   XNEWCP, XMIN,
     *   YMIN, TMOLMIN,TMOLMAX,
     *   LMONTE,IMBEG,IMEND,SSTANDARD,LSCV,
     *   LDISK,TDISK,PDISK,WMAX,LSOLID,
     *   DMDT0,FCZDMDT,FTOTDMDT,COMPACC,CREIM,LREIMER,LMDOT,
     *   LOPALE01,LcondOpacP,LOPALE06,LNumDeriv,
     *   ALATM_FeH,ALATM_Alpha,LALTPTau100,! For new Allard Atmospheres
     *   CSTMIXING, CSTDIFFMIX,      !CFD oct2009 To mimic mixing(reduce settling)
     *   LSOLWIND,LMWIND,LROSSBY,LPMM,LBSCALE,
     *   AWIND,PMMA,PMMB,PMMC,PMMD,PMMM,PMMJD,PMMMD,PMMWMAX,
C MHP 8/17 ADDED WMAX_SUN
     *   PMMSOLP,PMMSOLW,PMMSOLTAU,LCODM,CODM,WMAX_SUN,
C G Somers 6/14
     *   XSLI6,XSLI7,XSBE91,XSBE92,XSBE93,
     *   LXLI6,LXLI7,LXBE91,LXBE92,LXBE93,
     *   SLI6,SLI7,SBE91,SBE92,SBE93,LNEWNUC,
     *   SPOTF, SPOTX, LSDEPTH,
C G Somers END
C MHP 09/14 ADDED CROSS SECTIONS
     *   S0_1_1,S0_3_3,S0_3_4,S0_1_12,S0_1_13,S0_1_14,S0_1_16,
     *   S0_PEP,S0_1_BE7E,S0_1_BE7P,S0_HEP,S0_1_15_C12ALP,S0_1_15_O16,
     *   S0P_1_1,S0P_3_3,S0P_3_4,S0P_1_12,S0P_1_13,S0P_1_14,
     *   S0P_1_16,S0PP_1_12,S0PP_1_13,S0PP_1_16,S0P_1_BE7P,S0PP_1_BE7P,
     *   FLAG_DX,FLAG_DW,FLAG_DZ,LSTRUCT_TIME,
     *   TIME_CORE_MIN,TIME_DL,TIME_DP,TIME_DR,TIME_DT,TIME_DW_GLOBAL,
     *   TIME_DW_MIX,TIME_DX_CORE_FRAC,TIME_DX_CORE_TOT,TIME_DX_SHELL,
     *   TIME_DX_TOTAL,TIME_DY_CORE_FRAC,TIME_DY_CORE_TOT,TIME_DY_SHELL,
     *   TIME_DY_TOTAL,TOL_CZBASE_FINE_WIDTH,TOL_DL_MAX,TOL_DM_MAX,
     *   TOL_DM_MIN,TOL_DP_CORE_MAX,TOL_DP_CZBASE_MAX,TOL_DP_ENV_MAX,
     *   TOL_DX_MAX,TOL_DZ_MAX,TIME_MAX_DT_FRAC,LNEWVARS,
C G Somers 3/17 USE NEW OVERTURN TIMESCALE CALC?
     *   LNEWTCZ, LCALCENV
C
C DBG DATA CARDS FOR THE RUN PARAMETERS
C MHP DATA FOR MONTE CARLO OPTION, ETC
      DATA LMONTE,IMBEG,IMEND/.FALSE.,1,1/
c Changed slightly 3He-3He on 9/25/97 to take account of the S'.
c  Previously (6/16/97) used S at Gamow Peak. Agrees with Workshop paper.
c
      DATA WEAKSCREENING/0.03D0/
      DATA SSTANDARD/0.9828,1.0485,0.9815,0.9241,1.3818,1.0542,1.0,
     $ 1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0108,0.7819,0.2875/
C MHP 7/93 VARIABLE FC OPTION
C MHP 9/94 COMBINED DIFFUSION/ADVECTION OPTION
      DATA LVFC,LDIFAD/.FALSE.,.FALSE./
C MHP 9/93
      DATA LNOJ/.FALSE./
      DATA TDISK,PDISK,LDISK/0.0D0,7.2722D-6,.FALSE./
      DATA XALEX/0.7E0/
      DATA ZALEX/0.02E0/
      DATA LSENV0A, SENV0A /50*.FALSE.,50*1.26D-4/
      DATA XENV0, ZENV0/0.7,0.02/
      DATA LDEBUG, LCORR, NPOINT, LMILNE, LTRACK, LSTORE,
     1 LSTPCH
     2  /.FALSE., .TRUE., 1, .FALSE., .TRUE., .FALSE.,.FALSE./
      DATA LSCRIB/.TRUE./
      DATA LSTCH/.FALSE./
      DATA LENVG, ATMSTP, ENVSTP/.FALSE.,0.5,0.5/
      DATA NPRTMOD, NPRTPT/1,1/
      DATA NUMRUN, KINDRN, LFIRST, NMODLS
     1     /1,50*1,50*.TRUE.,50*0/
C MHP 10/24 ADDED NEW DEFAULTS FOR END CONDITIONS ON CENTRAL D,X,Y
      DATA ENDAGE, SETDT, RSCLM, RSCLX, RSCLZ, RSCLCM
     1     /50*0.0,50*0.0,50*0.0,50*0.0,50*0.0,50*0.0/
      DATA END_DCEN,END_XCEN, END_YCEN
     1     /50*0.0,50*0.0,50*0.0/
      DATA AID/'HE3','C12','C13','N14','N15','O16','O17','O18','H2 ',
     *'LI6','LI7','BE9'/
      DATA OPTOL,ZSI/1.0D-8,0.0D0/
      DATA TCUT,TSCUT,TENV0,TENV1,TGCUT/
     *     6.5D0,6.5D0,6.82D0,7.7D0,7.5D0,6.0D0,3.0D0,9.0D0,6.9D0/
      DATA ATMERR,ATMD0,ATMBEG,ATMMIN,ATMMAX/3.0D-4,1.0D-10,1.0D-1,
     *     1.0D-1,5.0D-1/
      DATA ENVERR,ENVBEG,ENVMIN,ENVMAX/3.0D-4,1.0D-1,1.0D-1,5.0D-1/
      DATA STOLR0,IMAX,NUSE/1.0D-3,11,7/
      DATA DTDIF,DJOK,ITDIF1,ITDIF2/1.0D-2,1.0D-4,1,1/
      DATA HTOLER/6.0D-5,4.5D-5,3.0D-5,9.0D-5,3.0D-5,9.0D-1,5.0D-1,
     *     5.0D-1,2.0D0,2.5D-6/
      DATA HPTTOL/1.0D-8,8.0D-2,5.0D-2,5.0D-2,1.0D0,1.0D0,0.0D0,5.0D-2,
     *            2.0D-2,5.0D-2,5.0D-2,1.0D-1/
      DATA LNEWCP,ANEWCP,XNEWCP/.FALSE.,'   ',1.3D1/
C MHP 10/24 ADDED NEW MIXTURE CONTROL ISETISO CONTROLS CNO ISOTOPE RATIOS AND
C LIGHT ELEMENT ABUNDANCES D,HE3,LI6,LI7,BE9,B10,B11 (1=USED)
C ISETMIX CONTROLS C+N+O MASS FRACTIONS (1=USED)
C AMIX AND AISO ARE STRINGS IDENTIFYING EITHER A PRESET MIXTURE OR A CUSTOM ONE ('CUS')
C SUPPORTED AMIX AT PRESENT ARE 'GS98','AAG21',M22M','M22P'. SUPPORTED AISO IS 'L21'.
C FOR A CUSTOM MIXTURE YOU CAN ENTER INDIVIDUAL VALUES.
C TO BE ADDED - AMIX FROM ATOMIC OPACITY TABLES (INEWMIX=2) AND OTHER MIXTURES/ISOTOPES
      DATA ISETISO,ISETMIX,AMIX,AISO/0,0,'GS98','L21'/
C     L21 DEFAULT ISOTOPE DATA LODDERS ET AL. 2021 SSRV 217,44
      DATA R12_13,R14_15,R16_17,R16_18,XH2_INI,XHE3_INI,XLI6_INI,
     *     XLI7_INI,XBE9_INI,XB10_INI,XB11_INI/88.27D0,411.9D0,471.4D0,
     *     2693.0D0,2.781D-5,3.461D-5,7.187D-10,1.025D-8,1.595D-10,
     *     1.002D-9,4.405D-9/
C     GS98 DEFAULT CNO FRACTIONS OF METALS GREVESSE&sAUVAL 1998 SSRV 85,161
      DATA ZXMIX,FRAC_C,FRAC_N,FRAC_O/0.02292D0,0.172148D0,0.050426D0,
     *     0.468195/
C MHP 10/24 DATA FOR CNO FRACTIONS AND Z/X OF DIFFERNT SOLAR MIXTURES.
C     AMIXT IS THE LIST OF IDS,EACH OF WHICH HAS A ZX AND CNO FRACS
C     ENTRY 1 =GS98(IN PARMIN),2=ASPLUND ET AL. 2021 A&A 653,141
C     3,4=MAGG ET AL. 2021 (MET,PHOT) A&A 661,140
      DATA AMIXT,ZXMIXT,FRAC_CT,FRAC_NT,FRAC_OT/'GS98','AAG21',
     *     'M22P','M22M',0.02292D0,0.0187D0,0.0225D0,0.0226D0,
     * 0.172148D0,0.184156D0,0.19239D0,0.191425D0,
     * 0.050426D0,0.050344D0,0.059012D0,0.058716D0,
     * 0.468195D0,0.416592D0,0.415631D0,0.413545D0/
      DATA ACFPFT,ITFP1,ITFP2/1.0D-36,5,20/
      DATA TRIDT,TRIDL/1.0D-2,8.0D-2/
      DATA NITER1,NITER2,NITER3,FCORR0,FCORRI/2,20,2,0.8D0,0.1D0/
      DATA ATIME/1.0D-3,2.0D-2,5.0D-1,2.0D-2,3.0D-1,1.5D-3,1.0D-1,
     *           2.0D-2,4.0D-2,2.0D-2,2.0D-2,0.25D0,1.5D0,0.25D0/
C      ATIME(13) was orginally = 1.5.
      DATA DTWIND /1.0D1/
      DATA LPTIME/.TRUE./
C JVS 04/14
      DATA LTRIST/.FALSE./
      DATA LKUTHE,CMIXL/.FALSE.,1.4D0/
C       DATA DPENV,LNSTDMX,LOVSTC,ALPHAC,LOVSTE,ALPHAE, LOVSTM, ALPHAM
C      */1.0D0,.FALSE.,.FALSE., 0.0D0, .FALSE.,0.0D0, .FALSE., 0.0/
      DATA DPENV,LOVSTC,ALPHAC,LOVSTE,ALPHAE, LOVSTM, ALPHAM
     */1.0D0,.FALSE., 0.0D0, .FALSE.,0.0D0, .FALSE., 0.0/
      DATA LADOV/.FALSE./
C JVS 07/13
       DATA LOVMAX,BETAC/.FALSE.,0.15D0/
C END JVS
      DATA LNEW0,LEXCOM/.FALSE.,.FALSE./
      DATA LROT,WALPCZ,LINSTB,LWNEW,WNEW/.FALSE.,0.0D0,.FALSE.,
     *     .FALSE.,0.0D0/
      DATA LJDOT0,ALFA,FK/.TRUE.,1.5D0,1.0D0/
      DATA FW,FC,FO,FES,FGSF,FMU,FSS,RCRIT/1.0D0,1.0D0,
     *     1.0D0,1.0D0,1.0D0,1.0D0,1.0D0,1.0D3/
C MHP 8/17 INITIALIZED WMAX_SUN
      DATA WMAX,WMAX_SUN/3.0D-4,1000.0/
C DBG PULSE DATA CARD FOR PULSATION
      DATA LPULSE/.FALSE./
      DATA IPVER/1/
      DATA ITRVER/1/
      DATA KTTAU/0/
      DATA CLSUN,CRSUN/3.8515D33,6.9598D10/
C YC  If LMHD is TRUE use MHD equation of state tables.  LU numbers
C     are stored in IOMHDi.
C DBG If LCORE is TRUE then calculate shells interior to start up
C     model's inner most shell.
      DATA LCORE,MCORE,FCORE/.FALSE.,0,1.0/
      DATA LMHD/.FALSE./
C MHP 5/90 NEW DATA STATEMENTS FOR NEW PARAMETERS
      DATA GRTOL,ILAMBDA,NITER_GS,LDIFY/1.0D-8,1,10,
     *     .FALSE./
      DATA NITER4,LNEWS,LSNU/0,.FALSE.,.FALSE./
      DATA DT_GS,XMIN,YMIN,LTHOULFIT/0.1D0,1.0D-3,1.0D-3,.FALSE./
      DATA LTHOUL,LDIFZ,FGRZ,FGRY/.FALSE.,.FALSE.,1.0D0,1.0D0/
      DATA LNEWDIF,LDIFLI/.FALSE.,.FALSE./
      DATA CMIN,ABSTOL,RELTOL,KEMMAX/1.0D-20,1.0D-5,1.0D-4,50/
      DATA ETADH0, ETADH1, LDH/-1.0D0, 1.0D0, .FALSE./
      DATA FESC,FSSC,FGSFC/1.0D0,1.0D0,1.0D0/
      DATA IES,IGSF,IMU/1,1,1/
      DATA LSEMIC/.FALSE./
C DBGLAOL
      DATA TOLLAOL,LLAOL,LPUREZ/10.0,.FALSE.,.FALSE./
C DBG 11/11/91
      DATA LRWSH,LISO/.FALSE.,.FALSE./
C 3/92 DBG
      DATA LNULOS1/.FALSE./
C DBG PULSE OUT 7/92
      DATA POMAX,POA,POB,POC,LPOUT/0.1D0,1.0D0,10.0D0,0.0D0,.FALSE./
C MHP 06/13 ADDED FLAG TO CALIBRATE TO SOLAR Z/X, SOLAR Z/X, SOLAR AGE
      DATA TOLL,TOLR,TOLZ,LCALS,LCALSOLZX,CALSOLAGE,CALSOLZX/1.0D-5,
     *     1.0D-4,1.0D-3,.FALSE.,.FALSE.,4.57D9,0.02292D0/
C      DATA TOLL,TOLR,LCALS/1.0D-5,1.0D-4,.FALSE./
C DBG 4/94 ZRAMP STUFF
      DATA RSCLZC, RSCLZM1, RSCLZM2, LZRAMP/50*-1.0D0, 50*-1.0D0,
     *       50*-1.0D0, .FALSE./
C DBG 12/94 CALIBRATED STELLAR MODEL STUFF
      DATA LCALST, LTEFF/.FALSE., .FALSE./
C YCK >>>  2/95 OPAL eos
C LLP >>> OPAL 2001 EOS, Potekhin Conductive Opacities,
C         OPAL 2006 EOS, Use Numerical Derivitives switches
      DATA LOPALE, LOPALE01,LcondOpacP,LOPALE06,LNumDeriv
     x     /.FALSE.,.FALSE.,.FALSE.,.FALSE.,.FALSE./
C MHP 8/25 Removed hard coded defaults
C     Alex low T opacity
C      DATA OPECALEX/'OPACALEXANDER.X00',
C     +              'OPACALEXANDER.X01',
C     +              'OPACALEXANDER.X02',
C     +              'OPACALEXANDER.X035',
C     +              'OPACALEXANDER.X05',
C     +              'OPACALEXANDER.X07',
C     +              'OPACALEXANDER.X08'/

C DBG 1/96 THE ARRAY V, READ IN VIA RDLAOL, CONTAINED THE MASS FRACTIONS
C OF THE ENVELOPE ELEMENTS. IT WAS USED IN STARIN TO DEFINE FXENV,
C WHICH ARE THE NUMBER FRACTION OF THE ENVELOPE ELEMENTS. FXENV WAS
C THEN UPDATED IN EQSTAT AND EQSAHA. HERE WE DEFINE VNEW PASSED
C IN A COMMON BLOCK VNEWCB. IT IS IDENTICAL TO V EXCEPT THAT THE NUMBERS
C ARE DEFINED HERE EXPLICITY FOR A G&N93 SOLAR MIXTURE. YOU CAN
C CHANGE THEM VIA THE PHYSICS NAMELIST. V IS SET EQUAL TO VNEW IN
C  STARIN EXCEPT WHEN LLAOL=T (TO MAINTAIN BACKWARD COMPATIBILITY.
C            Na          Al          Mg          Fe
C            Si          C           H           O
C            N           Ar          Ne          He
      DATA VNEW/0.001999D0, 0.003238D0, 0.037573D0, 0.071794D0,
     +          0.040520D0, 0.173285D0, 0.000000D0, 0.482273D0,
     +          0.053152D0, 0.005379D0, 0.098668D0, 0.000000D0/
C MHP 5/97 OPTION FOR SAUMON, CHABRIER, AND VAN HORN EOS ADDED
      DATA LSCV/.FALSE./
C MHP 3/99 OPTION FOR SB ROTATION ENFORED IN THE ENTIRE STAR AT
C ALL TIMES
      DATA LSOLID/.FALSE./
      DATA DMDT0,FCZDMDT,FTOTDMDT,COMPACC,CREIM,LREIMER,LMDOT
     *     /-1.0D-14,
     *     0.1D0,1.0D-2,0.71668d0,0.265721d0,0.01757d0,2.9d-5,
     *     3.013d-3,3.385d-5,9.346d-4,0.0d0,8.462d-3,0.0d0,
     *     1.696d-5,0.0d0,2.0d-9,2.0d-9,3.0d-11,-4.0D-13,
     *     .FALSE.,.FALSE./
C mhp 8/10 added scaled solar wind mass loss option
C      DATA LSOLWIND,DMSUN,DMWSUN,DMWMAX/.FALSE.,-2.0D-14,2.863E-6,9.054E-5/
      DATA LSOLWIND/.FALSE./
C 3/09 Alexander 2006 opacity table options and opacity ramp options
      DATA TMOLMIN,TMOLMAX,LALEX06/4.0D0,4.1D0,.FALSE./
CFD 10/09 Mimic mixing options - acting on setling and differential settling
      DATA CSTMIXING, CSTDIFFMIX/1.0,1.0/
C JVS 02/11 Initialize acoustic depth common block values appropriately
      DATA AGEOUT/0.5D0, 1.0D0, 5.0D0, 10.0D0, 20.0D0/
      DATA LCLCD, LJLAST, LJWRT, LACOUT/.FALSE.,.FALSE., .FALSE.,.FALSE./
C JVS end
C MHP 02/12 NEW PARAMETERIZATION OF ANGULAR MOMENTUM AND MASS LOSS
C FROM MAGNETIZED SOLAR-LIKE WINDS
C      DATA LPMM,PMMA,PMMB,PMMC,PMMM,PMMJD,PMMMD,PMMWMAX,
C     *     PMMSOLP,PMMSOLW,PMMSOLTAU
C     *   /.FALSE.,2.0D0,1.0D0,0.0D0,0.22D0,1.32E30,1.27E12,
C     *     2.836E-5,4.9304D0,2.836E-6,1.065E6/
C G Somers 6/16 NEW PARAMETERIZATION OF ANGULAR MOMENTUM AND MASS LOSS FROM
C SOLAR WINDS. FOLLOW MATT ET AL (2012) FORMULATION, BUT DEFAULT TO KAWALER
C TYPE LAW.
      DATA LMWIND,LROSSBY,LBSCALE/.FALSE.,.TRUE.,.FALSE./
C MHP 8/17 CHANGED DEFAULT FOR PMMA TO 2 FROM 0
      DATA AWIND,PMMA,PMMB,PMMC,PMMD,PMMM/'K97',2.0,1.0,2.0,0.0,0.5/
      DATA PMMJD,PMMMD,PMMSOLP,PMMSOLW,PMMSOLTAU/1.32E30,1.27E12,
     *     4.9304D0,2.836E-6,9.4805D5/
C MHP 02/12 PERMIT CONSTANT DIFFUSION COEFFICIENT
      DATA LCODM,CODM/.FALSE.,2.5D4/
C
C G Somers 06/14 ALLOW NEW LI DESTRUCTION CROSS SECTIONS
C           NEW VALUES SHOULD BE IN UNITS OF keV b.
C           DEFAULT LI6 = 5,500 keV b FROM FOWLER ET AL. 1967
C           DEFAULT LI7 = 52 keV b FROM ROLFS & KAVANAGH 1986
C           DEFAULT BE9(P,G)B10 (BE91) = 1.1 keV b INFERRED FROM FOWLER 1988
C               THEY DON'T SHOW THIS REACTION, SO THIS IS APPROXIMATE.
C           DEFAULT BE9(P,D)2HE4 (BE92) = 15,000 keV b FROM FOWLER ET AL. 1967
C           DEFAULT BE9(P,A)LI6 (BE93) = 15,000 keV b FROM FOWLER ET AL. 1967
      DATA XSLI6, XSLI7, XSBE91, XSBE92, XSBE93
     *     /5.5D3, 5.2D1, 1.1D0, 1.5D4, 1.5D4/
      DATA LXLI6, LXLI7, LXBE91, LXBE92, LXBE93,
     *     SLI6, SLI7, SBE91, SBE92, SBE93
     *     /.FALSE.,.FALSE.,.FALSE.,.FALSE.,.FALSE.,
     *     1.0D0, 1.0D0, 1.0D0, 1.0D0, 1.0D0/
      DATA SPOTF, SPOTX, LSDEPTH/0.00, 1.00, .FALSE./
C G Somers END
C MHP 8/14 DEFAULT CROSS-SECTIONS ARE TAKEN FROM THE SOLAR FUSION II PAPER
C REFERENCE ADELBERGER ET AL. 2011. UNITS ARE KeV b
      DATA S0_1_1,S0_3_3,S0_3_4,S0_1_12,S0_1_13/
     *     4.01D-22,5.21D3,5.6D-1,1.34D0,7.6D0/
      DATA S0_1_14,S0_1_16,S0_PEP,S0_1_BE7E/
     *     1.66D0,1.06D1,3.5734D-6,1.7709D-10/
C NOTE: PEP IS THE PROPORTIONALITY CONSTANT RELATIVE TO PP
C NOTE: BE7+E- IS THE PROPORTIONALITY CONSTANT IN THE LINEAR TERM
C THE CODE USES T9, NOT T6, SO ANY EXPRESSION IN TERMS OF T/10^6 K
C NEEDS TO BE DIVIDED BY 1000^0.5 (FOR BOTH PEP AND BE7+E-)
      DATA S0_1_BE7P,S0_HEP,S0_1_15_C12ALP,S0_1_15_O16/
     *     0.0208D0,8.6D-20,7.3D4,3.6D1/
C REFERENCE FIRST DERRIVATIVES OF CROSS-SECTIONS (ADELBERGER ET AL. 2011)
C UNITS ARE b
      DATA S0P_1_1,S0P_3_3,S0P_3_4,S0P_1_12/
     *     4.49D-24,-4.9D0,-3.6D-4,2.6D-3/
      DATA S0P_1_13,S0P_1_14,S0P_1_16,S0P_1_BE7P/
     *     -7.83D-3,-3.3D-3,-5.4D-2,-3.12D-5/
C REFERENCE SECOND DERIVATIVES OF CROSS SECTIONS (ADELBERGER ET AL. 2011)
      DATA S0PP_1_12,S0PP_1_13,S0PP_1_16,S0PP_1_BE7P/
     *     8.3D-5,7.29D-4,0.0D0,-2.288D-7/
      DATA LNEWNUC /.FALSE./
      DATA TIME_CORE_MIN,TIME_DL,TIME_DP,TIME_DR,TIME_DT,TIME_DW_GLOBAL,
     *     TIME_DW_MIX,TIME_DX_CORE_FRAC,TIME_DX_CORE_TOT,TIME_DX_SHELL,
     *     TIME_DX_TOTAL,TIME_DY_CORE_FRAC,TIME_DY_CORE_TOT,
     *     TIME_DY_SHELL,TIME_DY_TOTAL,TIME_MAX_DT_FRAC,LNEWVARS/
     *     1.0D-3,2.0D-2,4.0D-2,2.0D-2,2.0D-2,8.0D-2,
     *     8.0D-2,0.5D0,2.0D-2,0.1D0,
     *     1.5D-3,0.5D0,2.0D-2,0.1D0,1.5D-3,1.5D0,.FALSE./
      DATA FLAG_DX,FLAG_DW,FLAG_DZ,LSTRUCT_TIME,TOL_CZBASE_FINE_WIDTH,
     *     TOL_DL_MAX,TOL_DM_MAX,TOL_DM_MIN,TOL_DP_CORE_MAX,
     *     TOL_DP_CZBASE_MAX,TOL_DP_ENV_MAX,TOL_DX_MAX,TOL_DZ_MAX/
     *     0.05D0,0.10D0,0.05D0,.FALSE.,0.0D0,
     *     0.02D0,0.08D0,1.0D-8,0.05D0,0.05D0,0.05D0,1.0D0,1.0D0/
C DEFAULT TO YES FOR NEW TAUCZ CALCULATION
      DATA LNEWTCZ,LCALCENV /.TRUE.,.TRUE./
C
C THIS SUBROUTINE READS ALL USER DEFINED QUANTITIES FROM THE
C FILES yrec8.nml1 and yrec8.nml2
C VALUES FOR LOGICAL UNITS USED IN READS AND WRITES SET IN DATA
C STATEMENT; THEY CAN BE CHANGED IN THE NAMELIST IF NEEDED.
C LOGICAL UNIT 5 = READ FROM SCREEN
C LOGICAL UNIT 6 = WRITE TO SCREEN: FOR BATCH USE STATUS FILE INSTEAD
C SPECIFY ALL LOGICAL UNIT NUMBERS HERE:
C OUTPUT: STATUS FILE
      IOWR = 6
C OUTPUT: LAST MODEL (TEXT)
      ILAST = 11
C INPUT: FIRST MODEL (TEXT)
      IFIRST = 12
C INPUT: PHYSICS NAMELIST
      IRUN = 13
C INPUT: CONTROL NAMELIST
      ISTAND = 14
C INPUT: FERMI TABLES
      IFERMI = 15
C OUTPUT: RESERVED for DEBUGGING
      IDEBUG = 18
C OUTPUT: TRACK
      ITRACK = 19
C OUTPUT: ALL DIAGNOSTIC INFO
      ISHORT = 20
C OUTPUT: MILNE INVARIANT VARIABLES
      IMILNE = 21
C OUTPUT: SHELL BY SHELL INFO ON MODELS
      IMODPT = 22
C OUTPUT: SAVED MODELS, CAN BE USED AS STARTING MODEL
      ISTOR = 23
C OUTPUT: FOR PULSATION CODE, INTERIOR
      IOPMOD = 24
C OUTPUT: FOR PULSATION CODE, ENVELOPE
      IOPENV = 25
C OUTPUT: FOR PULSATION CODE, ATMOSPHERE
      IOPATM = 26
C OUTPUT: BINARY OUTPUT OF LAST MODEL
      ILSTBN = 27
C OUTPUT: BINARY OUTPUT OF STORED MODELS
      ISTOBN = 28
C INPUT: BINARY STARTING MODEL
      IFSTBN = 29
C OUTPUT: INFO RELAVENT TO DYNAMO
      IDYN = 30
C YCK INPUT: OPAL92 OPACITY TABLES
      ILLDAT = 32
C YCK INPUT: OPAL95 OPACITY TABLE
      ILIV95 = 48
C OUTPUT: SNU FLUXES
      ISNU = 33
C OUTPUT: EXTENDED COMPOSITION INFO
      ISCOMP = 34
C YCK INPUT: KURUCZ LOW T OPACITIES
      IKUR = 36
C OUPUT: ISOCHRONE INFORMATION
      IISO = 37
C INPUT: KURUCZ ATMOSPHER TABLE
      IOATM = 38
C YCK INPUT: Alex LOW T OPACITIES
      IALXO = 39
C INPUT: MHD EQU. OF STATE TABLES
      IOMHD1 = 40
      IOMHD2 = 41
      IOMHD3 = 42
      IOMHD4 = 43
      IOMHD5 = 44
      IOMHD6 = 45
      IOMHD7 = 46
      IOMHD8 = 47
C INPUT: OPAL EQUATION OF STATE
      IOPALE = 49
C INPUT LAOL OPACITIES IN DENSE GRID FORMAT
      IOLAOL = 61
C INPUT: LAOL OPACITIES FOR PURE CN IN DENSE GRID FORMAT
      IOPUREZ = 62
C DBG 4/94
C     INPUT:
C DBG 8/95 SECOND OPOACITY TABLES FOR ZRAMP AND Z DIFFUSION
      IOLAOL2 = 63
      IOOPAL2 = 64
      IKUR2 = 65
C MHP 6/97 ADDED OPTION FOR ALLARD MODEL ATMOSPHERES
      IOATMA = 66
C MHP 6/98 MONTE CARLO FOR SNUs
      IMONTE1 = 70
      IMONTE2 = 71
C INPUT FILES FOR THE SCV EOS
      ISCVH=72
      ISCVHE=73
      ISCVZ=74
C Input files for Potekhin conductive opacities. LLP 7/8/06
      IcondOpacP = 75
C      FcondOpacP = 'condall.d'
C Default FeH and Alpha for new Allard Atmospheres
      ALATM_FeH = 0D0
      ALATM_Alpha = 0D0
      LALTPTAU100 = .FALSE.
C 3/09 Input file for 2006 Alexander opacities
      IALEX06 = 90


C JVS 02/11 Altered the yrec8 input format so that files can be entered
C on the command line, with the *.nml1 as the first argument, and *.nml2 as
C the second. Defaults to yrec8.nml1 and yrec8.nml2 if none are provided.
c      OPEN(UNIT=ISTAND, FILE='yrec8.nml1', STATUS='OLD')
c      OPEN(UNIT=IRUN, FILE='yrec8.nml2', STATUS='OLD')
c      READ(UNIT=ISTAND, NML=CONTROL)
c      READ(UNIT=IRUN, NML=PHYSICS)
c      CLOSE(ISTAND)
c      CLOSE(IRUN)

      EMPTY='     '
      CALL GETARG(1, YREC1)
      IF (YREC1(1:2) .EQ. EMPTY(1:2)) YREC1 = 'yrec8.nml1'
      write(*,*) '.nml1 input file:',YREC1

      CALL GETARG(2, YREC2)
      IF (YREC2(1:2) .EQ. EMPTY(1:2)) YREC2 = 'yrec8.nml2'
      write(*,*) '.nml2 input file:',YREC2

      OPEN(UNIT=ISTAND, FILE=YREC1, STATUS='OLD')
      OPEN(UNIT=IRUN, FILE=YREC2, STATUS='OLD')
      READ(UNIT=ISTAND, NML=CONTROL)
      READ(UNIT=IRUN, NML=PHYSICS)
      CLOSE(ISTAND)
      CLOSE(IRUN)
C MHP 8/14 SUBROUTINE TO CONVERT MORE USER-FRIENDLY INPUT VARIABLES
C INTO THE VECTORS USED IN THE CODE (SUPERCEDES OLDER INPUTS)
      CALL REMAP
C MHP 06/13 Added memory of whether the choice of atmospheres has
C been changed during the run, and what the original setting was
      KTTAU0 = KTTAU
      LTTAU = .FALSE.
C DBG WRITE OUT ENTIRE NAMELIST TO ISHORT
      WRITE(ISHORT,NML=PHYSICS)
      WRITE(ISHORT,NML=CONTROL)
C JVS 02/11 Acoustic depth/ Asteroseismic glitch output. Puts output
C in the same directory as all other output, and names it with the
C same conventions
      IF (LACOUT) THEN
            ICLCD = 91
            MRK=INDEX(FSHORT,'short')
            FCLCD=FSHORT(1:MRK-1)//'calcad'
            OPEN(UNIT=ICLCD, FILE=FCLCD, STATUS='UNKNOWN')
            WRITE(ICLCD,*) 'Acoustic depth calculation output file'
            WRITE(ICLCD,*) 'age (Gyr),radius(cm),1/sound speed(s/cm),radius (CZ), 1/cs (CZ)
     *       delad,gamma1,P, T, X'


C      IACAT = 92
C      FACAT=FSHORT(1:MRK-1)//'acatm'
C      OPEN(UNIT=IACAT, FILE=FACAT, STATUS='UNKNOWN')
C      WRITE(IACAT,*) 'Acoustic depth calculation output file: atmosphere integration'
C      WRITE(IACAT,*) 'age (Gyr),radius(cm),1/sound speed(s/cm),delad,gamma1,
C     * P, T, X'

C            IJLAST = 93
C            FJLAST=FSHORT(1:MRK-1)//'jlast'
C            OPEN(UNIT=IJLAST, FILE=FJLAST, STATUS='UNKNOWN')

C      IJVS = 94
C      FJVS=FSHORT(1:MRK-1)//'jvs'
C      OPEN(UNIT=IJVS, FILE=FJVS, STATUS='UNKNOWN')
C      WRITE(IJVS,*) 'The dels'

C      IJENT = 95
C      FJENT=FSHORT(1:MRK-1)//'ent'
C      OPEN(UNIT=IJENT, FILE=FJENT, STATUS='UNKNOWN')
C      WRITE(IJENT,*) 'Profiles: Age(Gyr), log(R), log(L), Log(LHe3),
C     * Conv flag, log(T), log(P), log(D)'

C      IJDEL = 96
C      FJDEL=FSHORT(1:MRK-1)//'del'
C      OPEN(UNIT=IJDEL, FILE=FJDEL, STATUS='UNKNOWN')
C      WRITE(IJDEL,*) 'Profiles: Age(Gyr), depth, del, del, del'
      ENDIF


C JVS END
C
C G Somers 6/14, DEFINE SCALING COEFFICIENT FOR LI/BE CROSS SECTIONS
C          DEFAULT LI6 = 5.5 MeV b FROM FOWLER ET AL. 1967
C          DEFAULT LI7 = 52 keV b FROM ROLFS & KAVANAGH 1986
C           DEFAULT BE9(P,G)B10 (BE91) = 1.1 keV b INFERRED FROM FOWLER 1988
C           DEFAULT BE9(P,D)2HE4 (BE92) = 15,000 keV b FROM FOWLER ET AL. 1967
C           DEFAULT BE9(P,A)LI6 (BE93) = 15,000 keV b FROM FOWLER ET AL. 1967
      IF (LXLI6) THEN
          SLI6 = XSLI6/5.5D3
      ENDIF
      IF (LXLI7) THEN
          SLI7 = XSLI7/5.2D1
      ENDIF
      IF (LXBE91) THEN
          SBE91 = XSBE91/1.1D0
      ENDIF
      IF (LXBE92) THEN
          SBE92 = XSBE92/1.5D4
      ENDIF
      IF (LXBE93) THEN
          SBE93 = XSBE93/1.5D4
      ENDIF
C G Somers END
C MHP 8/25 open relevant table as well as ensuring that only one is selected
C  Disable Older OPAL EOS's if a newer one is specified
      IF (LOPALE06) THEN
          LOPALE01 = .FALSE.
          LOPALE = .FALSE.
         OPEN(IOPALE, FILE=FOPALE06,STATUS='OLD')
      ENDIF
      IF (LOPALE01) THEN
         OPEN(IOPALE, FILE=FOPALE01,STATUS='OLD')
         LOPALE = .FALSE.
      ELSE IF(LOPALE) THEN
         OPEN(IOPALE, FILE=FOPALE,STATUS='OLD')
      ENDIF
C 3/09 Disable older Alexander opacities if a newer one is specified
      IF(LALEX06)THEN
         LALEX95 = .FALSE.
         LKUR90 = .FALSE.
      ENDIF
      IF(LALEX95)THEN
         LKUR90 = .FALSE.
      ENDIF

      OPEN(ISTOR,FILE=FSTOR,FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(ISTOR)
C G Somers 11/14 write the new header for the .store file, if LSTORE = TRUE.
      IF(LSTORE)THEN
C JvS 08/25 Added stitched interior and envelope option      
         IF(LSTCH)THEN
            !WRITE(ISTOR,1013)
            !WRITE(ISTOR,1014)
         ELSE
            WRITE(ISTOR,1012)
         ENDIF   
      ENDIF
 1012 FORMAT('# Header Key',/,'# ModType    ModNum    #Shells    ',
     1 'M/Msun    log(Teff)    log(L/Lsun)    log(M/gram)    Age/Gyr',
     1 '    Timestep/yr    log(M_inner/gram)    log(M_outer/gram)',/,
     1 '# JCORE  JENV  CMIXL  EOS  ATM  ALOK HIK  LPUREZ  COMPMIX',
     1 '  LEXCOM  LDIFY  LDIFZ  LSEMIC  LOVSTC  LOVSTE  LOVSTM',
     1 '  LROT  LINSTB  LJDOT0  LDISK  TDISK  PDISK  WMAX  LSTORE',
     1 '  LSTATM  LSTENV  LSTMOD  LSTPHYS  LSTROT',/,'# PPI_lum',
     1 '    PPII_lum    PPIII_lum    CNO_lum    3He_lum    ',
     1 'OldNeu_lum    Grav_lum',/,'# ENV1-3   log(Teff)',
     1 '    log(L/Lsun)    P_base    T_base    R_base    MatrixElements'
     1 ,/)
C 1013 FORMAT('# JCORE  JENV  CMIXL  EOS  ATM  ALOK HIK  LPUREZ  COMPMIX',
C     1 '  LEXCOM  LDIFY  LDIFZ  LSEMIC  LOVSTC  LOVSTE  LOVSTM',
C     1 '  LROT  LINSTB  LJDOT0  LDISK  TDISK  PDISK  WMAX  LSTORE',
C     1 '  LSTATM  LSTENV  LSTMOD  LSTPHYS  LSTROT'
C     1 ,/)
C 1014     FORMAT(
C     1'MODEL SHELL MASS RADIUS LUMINOSITY PRESSURE TEMPERATURE DENSITY OMEGA ',
C     1'CONVECTIVE INTERIOR_PT H1 He4 METALS He3 C12 C13 N14 N15 O16 O17 O18 H2 Li6 Li7 ',
C     1'Be9 OPACITY GRAV DELR DEL DELAD V_CONV GAM1 HII HEII HEIII BETA ',
C     1'ETA PPI PPII PPIII CNO TRIPLE_ALPHA E_NUC E_NEU E_GRAV CP DLNRHODLNT A RP/RE FP ',
C     1'FT J/M MOMENT DEL_KE V_ES V_GSF V_SS VTOT ')
C G Somers END

      OPEN(ISHORT,FILE=FSHORT,FORM='FORMATTED',STATUS='UNKNOWN')
      REWIND(ISHORT)
      IF (LTRACK) THEN
          OPEN(UNIT=ITRACK,FILE=FTRACK, FORM='FORMATTED',
     *        STATUS='UNKNOWN')
          REWIND(ITRACK)
      ENDIF

C SNU OUTPUT
      IF(LSNU) THEN
          OPEN(UNIT=ISNU,FILE=FSNU, FORM='FORMATTED',
     *        STATUS='UNKNOWN')
          REWIND(ISNU)
      ENDIF
      IF(LDEBUG) THEN
            OPEN(IDEBUG,FILE=FDEBUG,FORM='FORMATTED',
     *         STATUS='UNKNOWN')
      END IF
C     MHP Moved opening of FMILNE here, no need to do elsewhere
      IF(LMILNE)THEN
         OPEN(UNIT=IMILNE,FILE=FMILNE,FORM='FORMATTED',
     *     STATUS='UNKNOWN',ACCESS='APPEND')
      ENDIF
C     MHP 10/02 LBNIN never set, ignore loop
C      IF (.NOT.LBNIN) THEN
         OPEN(UNIT=IFIRST,FILE=FFIRST,FORM='FORMATTED',STATUS='OLD')
C      END IF
      OPEN(UNIT=ILAST,FILE=FLAST,FORM='FORMATTED',STATUS='UNKNOWN')
      OPEN(UNIT=IMODPT,FILE=FMODPT,FORM='FORMATTED',STATUS='UNKNOWN')
C     OPEN ALL PULSE FILES
      IF(LPULSE) THEN
      OPEN(IOPMOD, FILE=FPMOD,STATUS='UNKNOWN',FORM='FORMATTED')
      OPEN(IOPENV, FILE=FPENV,STATUS='UNKNOWN',FORM='FORMATTED')
      OPEN(IOPATM, FILE=FPATM,STATUS='UNKNOWN',FORM='FORMATTED')
      END IF
C MHP 6/98
C MHP 8/25 Moved call from main to here for opening idyn
      IF(LMONTE)THEN
         OPEN(UNIT=IDYN,FILE=FDYN,FORM='FORMATTED',STATUS='OLD')
         OPEN(IMONTE1, FILE=FMONTE1,STATUS='UNKNOWN',FORM='FORMATTED')
         OPEN(IMONTE2, FILE=FMONTE2,STATUS='UNKNOWN',FORM='FORMATTED')
      ENDIF
C     MHP 8/25 Moved opening of conductive opacity and EoS tables here, to avoid complicated passages of declared variables.
      IF(LcondOpacP)then
         open(IcondOpacP,file=FcondOpacP,status='OLD')
      ENDIF
      IF(LISO) THEN
         OPEN(IISO, FILE=FISO,STATUS='UNKNOWN', FORM='FORMATTED')
      ENDIF
      IF(LSEMIC)THEN
         IF(LOVSTC.OR.LOVSTE.OR.LOVSTM)THEN
            WRITE(ISHORT,2)LSEMIC,LOVSTE,LOVSTC,LOVSTM
    2       FORMAT(1X,'ERROR IN SUBROUTINE PARMIN'/'SEMI-CONVECTION',
     * ' AND OVERSHOOT FLAGS BOTH TURNED ON'/'FLAGS LSEMIC',L2,
     * ' OVERSHOOT - CORE,ENVELOPE,INTERMEDIATE-',3L2/'RUN STOPPED')
            STOP
         ENDIF
      ENDIF
      WRITE(ISHORT,1)(HPTTOL(I),I=1,12),ALPHAE,ALPHAC,LINSTB,LJDOT0,
     *              ALFA,FK,FW,FC,FO,FMU,RCRIT
    1 FORMAT(1X,'PT TOL',12F6.3/1X,'O.S.ENV',F6.3,' O.S.CORE',F6.3,
     *       ' LINSTB ',L1,' LJDOT ',L1,' WIND IND.',F6.3,' FK',
     *       1PE8.2/1X,' FV',0PF5.2,' FC',F5.2,' COUPLING'
     *       ,F6.3, ' F MU',F5.2,' RCRIT',F9.1)
      TENV = 0.5D0*(TENV0 + TENV1)
      IF(LROT) THEN
         LNEW0 = .TRUE.
         IF(WALPCZ.LT.-2.0D0) WALPCZ = -2.0D0
         IF(WALPCZ.GT.0.0D0) WALPCZ = 0.0D0
CCCCCC OLD OR NEW WINDLAW.
         IF(.NOT.LMWIND)THEN
CCCCCC INSTRUCTIONS FOR THE OLD WINDLAW
CCCCCC
CCCCCC SET UP COEFFICIENTS FOR ANGULAR MOMENTUM LOSS VIA WINDS.
CCCCCC GIVEN THE INDEX ALFA, THE FORMULA FOR JDOT IS
CCCCCC JDOT = FK*2.036D33*1.452D9**ALFA*(MDOT/1.0D-14)**(1-2ALFA/3)
CCCCCC *OMEGA**(1+4ALFA/3)*(R/RSUN)**(2-ALFA)*(M/MSUN)**-ALFA/3
CCCCCC EXMD = EXPONENT OF MDOT TERM; EXW SAME FOR OMEGA;EXR FOR R;EXM FOR M.
CCCCCC FK IS A FUDGE FACTOR,SET TO 1 TO REPRODUCE THE OBSERVED SOLAR ANGULAR
CCCCCC MOMENTUM LOSS.
            CC13 = 1.0D0/3.0D0
            CC23 = 2.0D0/3.0D0
            CONSTFACTOR = FK*2.036D33*1.452D9**ALFA
            EXMD = 1.0D0 - CC23*ALFA
            EXW = 1.0D0 + 2.0D0*CC23*ALFA
            EXR = 2.0D0 - ALFA
            EXM = -CC13*ALFA
C
C INSTRUCTIONS FOR THE NEW WINDLAW
C
C SET UP INDICES FOR LOSS LAW IN TERMS OF PMM A, B, C, M.
C INCLUDE A PMMD AS WELL, FOR TURNING TAUCZ and CENTRIFUG DEPENDENCE ON/OFF.
C EXCEN = EXPONENT FOR CENTRIFUGAL TERM, {K2^2/(K2^2+0.5*W^2 R^3/GM)}^PMMM
C
C AWIND = 'K97' ENFORCES KRISHNAMURTHI (1997) WIND LAW.
C AWIND = 'V13' ENFORCES VAN SADERS + PINSONNEAULT (2013) WIND LAW, AS ADAPTED
C         FROM MATT ET AL. (2008,2012).
C AWIND = 'CUS' ADOPTS THE M-D VALUES GIVEN IN THE NAMELIST.
C
C
C THEN CONVERT THE PMM VALUES INTO EXPONENTS FOR THE TORQUE CALCULATION.
C BASIC EQUATIONS, WHERE EVERY TERM IS SCALED TO SOLAR, ARE:
C
C Jdot = w * Bmag^4m * Mdot^1-2m * R^5m+2 * M^-m * Fcen^md
C Bmag = Pphot^0.5 * (w * R^c)^b * Tcz^d
C GM/R * Mdot = (Lx/Lbol * Lbol)^a -> Mdot = R * M^-1 * Lbol * w^a
C ...where Lx/Lbol is assumed to scale with w to the power of a.
C
C THIS GIVES:
C JDOT ~ w ^ 1+a-2ma+4mb
C      ~ Tcz ^ 4md
C      ~ R ^ 3+3m+4mbc
C      ~ M ^ m-1
C      ~ Lbol ^ 1-2m
C      ~ Pphot ^ 2m
C      ~ Fcen ^ md
C
C For moment, ignore GM/R term in Mdot. This makes:
C JDOT ~ R ^ 2+5m+4mbc
C JDOT ~ M ^ -m
C
         ELSE
            IF(AWIND.EQ.'K97')THEN
               PMMM = ALFA/3.0
C MHP 8/17 CORRECT DEFAULT FOR A = 2, NOT 0
               PMMA = 2.0
               PMMB = 1.0
               PMMC = 2.0
               PMMD = 0.0
               LBSCALE = .FALSE.
            ELSEIF(AWIND.EQ.'V13')THEN
               PMMM = 0.22
               PMMA = 2.0
               PMMB = 1.0
               PMMC = 0.0
               PMMD = 1.0
               LBSCALE = .TRUE.
            ENDIF
            EXW   = 1.0D0 + PMMA - 2.0D0*PMMA*PMMM + 4.0D0*PMMM*PMMB
C G Somers 8/17 ZERO'D OUT EXTAU. TAUCZ TERM NOW COMPUTED IN
C MWIND/MCOWIND, NOT IN AMCALC.
C            EXTAU = 4.0D0*PMMM
            EXTAU = 0.0
            EXR   = 2.0D0+5.0D0*PMMM-4.0D0*PMMM*PMMB*PMMC
            EXM   = -PMMM
            EXL   = 1.0D0 - 2.0D0*PMMM
C G Somers 11/17, ADDED PMMD TO SWTICH OFF IN K97 FORM.
            EXPR  = 2.0D0*PMMM*PMMD
            EXCEN = PMMM*PMMD
C INITIALIZE CONSTANT FACTOR FOR CENTRIFUGAL TERM
            C_2 = 0.0506
C SET THE CONSTANT FACTOR
            CONSTFACTOR = FK*PMMJD/PMMSOLW**EXW
C IF RELEVANT RESET THE SATURATION THRESHOLD IN
C TERMS OF THE SOLAR ROTATION RATE.  WMAX_SUN<1000
C INDICATES SATURATION (AT THE SUN), SO
C WSAT = WMAX_SUN*PMMSOLW
            IF(WMAX_SUN.LT.1.0E3)THEN
               WMAX = WMAX_SUN*PMMSOLW
            ENDIF
         ENDIF
      ENDIF
C     WINDLAW END
C
      CLN = DLOG(10.0D0)
      IF(LNEWCP) THEN
       LREL = .TRUE.
       IF(ATMP.EQ.'ABS') LREL = .FALSE.
C DECIDE WHICH ELEMENT IN ARRAY HCOMP TO BE RESCALED
C USING CHARACTER ARRAY AID AND INPUT CHARACTER VARIABLE ANEWCP
       DO 10 I = 1,12
          IF(ANEWCP.EQ.AID(I)) THEN
C INEWCP IS THE INDEX OF THE ELEMENT BEING ALTERED
            INEWCP = I + 3
            GOTO 30
          ENDIF
   10    CONTINUE
C ANEWCP NOT A RECOGNIZED ELEMENT
       LNEWCP = .FALSE.
       WRITE(ISHORT,20) ANEWCP
   20    FORMAT(1X,'VARIABLE',A4,1X,'NOT A RECOGNIZED ELEMENT'/1X,
     *   'RESCALING NOT PERFORMED')
   30    CONTINUE
      ENDIF
      LMIXTURE = .FALSE.
      LISOTOPE = .FALSE.
      IF(ISETMIX.EQ.1)THEN
C IF DEFAULT MIX (GS98) CNOFRACS ARE ALREADY SET.
C         IF(AMIX.EQ.'GS98')THEN
C            LMIXTURE = .TRUE.
C            GOTO 606
C         ENDIF
C FOR A CUSTOM MIX,DISABLE IF THE SUM OF CNO MASS FRACTIONS EXCEEDS ONE
C OR IF ANY MASS FRACTION IS NEGATIVE
         IF(AMIX.EQ.'CUS')THEN
            IF(FRAC_C.LT.0.0D0.OR.FRAC_N.LT.0.0D0.OR.FRAC_O.LT.0.0D0)THEN
               WRITE(*,591)FRAC_C,FRAC_N,FRAC_O
               WRITE(ISHORT,591)FRAC_C,FRAC_N,FRAC_O
 591           FORMAT('NEGATIVE INPUT CNO FRACTION ',3E12.4,
     *             ' MIX NOT MODIFIED')
               GOTO 602
            ENDIF
            SUM_FRAC=FRAC_C+FRAC_N+FRAC_O
            IF(SUM_FRAC.GE.1.0D0)THEN
               WRITE(*,598)FRAC_C,FRAC_N,FRAC_O
               WRITE(ISHORT,598)FRAC_C,FRAC_N,FRAC_O
 598           FORMAT('INPUT CNO FRACTION ',3E12.4,
     *             ' EXCEEDS 1. MIX NOT MODIFIED')
               GOTO 602
            ENDIF
C VALID MIXTURE, USE CUSTOM ENTRIES FROM .NML1
            LMIXTURE = .TRUE.
            GOTO 606
         ENDIF
C SEARCH THROUGH OTHER VALID MIXTURE ENTRIES;IF FOUND,ASSIGN
C         DO I = 2,4
         DO I = 1,4
            IF(AMIX.EQ.AMIXT(I))THEN
               ZXMIX = ZXMIXT(I)
               FRAC_C = FRAC_CT(I)
               FRAC_N = FRAC_NT(I)
               FRAC_O = FRAC_OT(I)
               LMIXTURE = .TRUE.
               GOTO 606
            ENDIF
         END DO
C     NO VALID MIX SPECIFIED
         WRITE(*,589)AMIX
         WRITE(ISHORT,589)AMIX
 589     FORMAT('DESIRED CNO MIXTURE ',A8,' NOT FOUND. MIX NOT ALTERED.')
      ENDIF
 606  IF(LMIXTURE)THEN
         WRITE(*,604)AMIX,FRAC_C,FRAC_N,FRAC_O
         WRITE(ISHORT,604)AMIX,FRAC_C,FRAC_N,FRAC_O
 604     FORMAT('CNO MIXTURE ',A8,' C ',E12.4,' N ',E12.4,' O ',
     *        E12.4,' APPLIED TO STARTING MODEL.')
      ENDIF
C     CHECK IF ISOTOPE RATIOS NEED TO BE ALTERED
 602  IF(ISETISO.EQ.1)THEN
C FOR A CUSTOM MIX,DISABLE IF THE SUM OF CNO MASS FRACTIONS EXCEEDS ONE
C OR IF ANY MASS FRACTION IS NEGATIVE
         IF(AISO.EQ.'CUS')THEN
            IF(R12_13.LT.0.0D0 .OR. R14_15.LT.0.0D0 .OR. R16_17.LT.0.0D0
     * .OR. R16_18.LT.0.0D0 .OR. XH2_INI.LT.0.0D0 .OR. XHE3_INI.LT.0.0D0
     * .OR. XLI6_INI.LT.0.0D0 .OR. XLI7_INI.LT.0.0D0 .OR.
     * XBE9_INI.LT.0.0D0.OR.XB10_INI.LT.0.0D0 .OR.XB11_INI.LT.0.0D0)THEN
               WRITE(*,596)R12_13,R14_15,R16_17,R16_18,
     * XH2_INI,XHE3_INI,XLI6_INI,XLI7_INI,XBE9_INI,XB10_INI,XB11_INI
               WRITE(ISHORT,596)R12_13,R14_15,R16_17,R16_18,
     * XH2_INI,XHE3_INI,XLI6_INI,XLI7_INI,XBE9_INI,XB10_INI,XB11_INI
 596           FORMAT('NEGATIVE INPUT ISOTOPE RATIO OR LIGHT ELEMENT'
     *  ' MASS FRACTION ',11E12.4,
     *             ' MIX NOT MODIFIED')
               GOTO 603
            ENDIF
            SUM_FRAC= XH2_INI+XHE3_INI+XLI6_INI+XLI7_INI+XBE9_INI+
     *                XB10_INI+XB11_INI
            IF(SUM_FRAC.GE.1.0D0)THEN
               WRITE(*,595)XH2_INI,XHE3_INI,XLI6_INI,XLI7_INI,XBE9_INI,
     * XB10_INI,XB11_INI
               WRITE(ISHORT,595)XH2_INI,XHE3_INI,XLI6_INI,XLI7_INI,
     * XBE9_INI,XB10_INI,XB11_INI
 595           FORMAT('SUM OF LIGHT ELEMENT MASS FRACTIONS EXCEEDS 1',
     * 11E12.4,' MIX NOT MODIFIED')
               GOTO 603
            ENDIF
C     CURRENTLY THERE ARE ONLY 2 VALID OPTIONS - THE DEFAULT (L21) OR
C A CUSTOM MIXTURE (CUS) - IF NEITHER IS TRUE, EXIT
         ELSE IF(AISO.NE.'L21')THEN
            GOTO 603
         ENDIF
C     PASSED ALL CHECKS - EITHER THE DEFAULT OR THE CUSTOM SETTINGS WILL BE APPLIED
         LISOTOPE = .TRUE.
      ENDIF
      IF(LISOTOPE)THEN
         WRITE(*,605)AISO,R12_13,R16_18,
     * XH2_INI,XHE3_INI,XLI6_INI,XLI7_INI,XBE9_INI
         WRITE(ISHORT,605)AISO,R12_13,R16_18,
     * XH2_INI,XHE3_INI,XLI6_INI,XLI7_INI,XBE9_INI
 605     FORMAT('ISOTOPE AND LIGHT ELEMENT MIXTURE ',A8,' C12/C13 ',
     *   E12.4,' O16/O18 ',E12.4,' H2 ',E12.4,' HE3 ',E12.4,' LI6 ',
     *   E12.4,' LI7 ',E12.4,' BE9 ',E12.4,' APPLIED TO STARTING MODEL.')
      ENDIF
C DBG 12/95 ENSURE CORRECT PARAMETERS FOR Z DIFFUSION
 603  IF (LDIFZ) THEN
           LDIFY=.TRUE.
         LTHOUL=.TRUE.
      END IF

C G SOMERS 04/15; ENSURE CORRECT PARAMETERS FOR LIGHT ELEMENT DIFFUSION.
      IF(LDIFLI)THEN
          LNEWDIF=.TRUE.
          LDIFY=.TRUE.
          LDIFZ=.TRUE.
          LTHOUL=.TRUE.
          LTHOULFIT=.FALSE.
          ILAMBDA=4
      ENDIF

C     WRITE OUT RUN PARAMETERS.

      WRITE(ISHORT,50)XENV0,ZENV0
   50 FORMAT(30X,'RUN DATA VALUES'/3X,
     *       'LINE  1     XENV0     ZENV0       ZSI'/2X,
     *       'STANDARD       N/A       N/A  0.00E+00'/3X,
     *       'CURRENT',1P2E10.0,2X,E8.2)
      IF(NPOINT.LE.0) NPOINT = 9999
      WRITE(ISHORT,70) LDEBUG,LCORR,NPOINT,LMILNE,LTRACK,LSTORE,LSTPCH
   70 FORMAT(3X,'LINE  2    LDEBUG     LCORR    NPOINT    LMILNE    LTRA
     *CK    LSTORE    LSTPCH'/2X,'STANDARD',2(9X,'T'),6X,
     *'9999',9X,'F',2(9X,'T'),9X,'T'/3X,'CURRENT',2(9X,L1),6X,
     *I4,3(9X,L1),9X,L1)
      IF(NPENV.LE.0) NPENV = 9999
      WRITE(ISHORT,90) LSCRIB,LSTATM,LSTENV,LSTMOD,LSTPHYS,LSTROT
   90 FORMAT(3X,'LINE  3    LSCRIB    LSTATM    LSTENV    LSTMOD',5X,
     *'LSTPHYS    LSTROT'/2X,'STANDARD',9X,'T',2(9X,'F'),
     *9X,'T',2(9X,'F'),9X,'2'/3X,'CURRENT',5(9X,L1),9X,L1)
      WRITE(ISHORT,110)LENVG,ATMSTP,ENVSTP
  110 FORMAT(3X,'LINE 4     LENVG    ATMSTP    ENVSTP'/2X,'STANDARD',7X,
     *       'N/A',6X,'0.50',6X,'0.50'/3X,'CURRENT',9X,L1,2(4X,F6.3))
      IF(NPRTMOD.LE.0) NPRTMOD = 9999
      IF(NPRTPT.LE.0) NPRTPT = 9999
      WRITE(ISHORT,130) NPRTMOD,NPRTPT
  130 FORMAT(3X,'LINE  4  NPRTMOD    NPRTPT'/2X,'STANDARD',
     *1(7X,'N/A'),9X,'5'/3X,'CURRENT',2(6X,I4))

C     SPIT OUT NAMELIST VARIABLES TO ISHORT

      WRITE(ISHORT,25) (TCUT(J),J=1,5),TSCUT,TENV0,TENV1,TGCUT
   25 FORMAT(3X,'LINE  2    TCUT-  E  TCUT- PP  TCUT-CNO  TCUT-
     *3A  TCUT- NU TCUT-SAHA     TENV0     TENV1     TGCUT'/2X, 'STANDAR
     *D',9X,'6.50',6X,'6.50',6X,'6.82',6X,'7.70',6X,'7.50',6X,
     *'6.00',6X,'3.00',6X,'9.00',6X,'6.90'/3X,'CURRENT',
     *9(5X,F5.2))
      WRITE(ISHORT,35) ATMERR,ATMMAX,ATMD0,ENVERR,ENVMAX,ENVMIN
C MHP 10/02 obsolete variables removed
C      WRITE(ISHORT,35) NIATM,ATMERR,ATMMAX,ATMD0,NIENV,ENVERR,ENVMAX,
C     *ENVMIN
   35 FORMAT(3X,'LINE  3     NIATM    ATMERR    ATMMAX     ATMD0',5X,
     *'NIENV    ENVERR    ENVMAX    ENVMIN'/2X,'STANDARD',9X,'8',2X,
     *'3.00E-04  5.00E-01  1.00E-10',8X,'10  3.00E-04  5.00E-01  2.50E-0
     *1'/3X,'CURRENT',10X,3(1PE10.2),10X,3(1PE10.2))
C     *1'/3X,'CURRENT',7X,I3,3(1PE10.2),7X,I3,3(1PE10.2))
      WRITE(ISHORT,45) TRIDT,TRIDL/TRIDT/TRIDL
   45 FORMAT(3X,'LINE  4     TRIDT     TRIDL    LSENV0',5X,
     *'SENV0'/2X,'STANDARD',6X,'0.01',6X,'0.08',9X,'F',2X,
     *'1.00E-07'/3X,'CURRENT',2F10.4)
      WRITE(ISHORT,55)(HTOLER(5,J),J=1,2),((HTOLER(I,J),I=1,4),J=1,2)
   55 FORMAT(3X,'LINE  5 TOL.RHS-P TOL.RHS-T MIN.COR-P MIN.COR-T MIN.COR
     *-R MIN.COR-L MAX.COR-P MAX.COR-T MAX.COR-R MAX.COR-L'/2X,'STANDARD
     *  3.00E-05  2.50E-06  6.00E-05  4.50E-05  3.00E-05  9.00E-05  9.00
     *E-01  5.00E-01  5.00E-01  2.00E+00'/3X,'CURRENT',10(2X,1PE8.2))
      WRITE(ISHORT,65)(HPTTOL(J),J=1,8)
   65 FORMAT(3X,'LINE  6  D(S)-MIN  D(S)-MAX   FLAG-DX   FLAG-DZ    MAX
     *DP MAX DL/LT    MAX DX    MAX DZ'/2X,'STANDARD  1.00E-08  8.00E-02
     *  5.00E-02  1.00E+00  5.00E-02  2.00E-02  1.00E+00  1.00E+00'/3X,
     *'CURRENT',8(2X,1PE8.2))
      WRITE(ISHORT,75)LNEWCP,ANEWCP,LREL,XNEWCP
   75 FORMAT(3X,'LINE  7    LNEWCP    ANEWCP      LREL    XNEWCP'/2X,
     *'STANDARD',9X,'F',7X,'N/A',9X,'T',7X,'N/A'/3X,'CURRENT',9X,L1,7X,
     *A3,9X,L1,1PE10.2)
      WRITE(ISHORT,85)ACFPFT,ITFP1,ITFP2
   85 FORMAT(3X,'LINE  8    ACFPFT     ITFP1     ITFP2'/2X,'STANDARD',
     *1X,'1.000E-20',9X,'2',8X,'20'/3X,'CURRENT',1PE10.3,6X,I4,6X,I4)
      WRITE(ISHORT,105) NITER1,NITER2,FCORR0,FCORRI
  105 FORMAT(32X,'RUN DATA VALUES'/3X,
     *'LINE  1    NITER1    NITER2    FCORR0    FCORRI'/2X,
     *'STANDARD',9X,'2',8X,'20',6X,'0.80',6X,'0.10'/3X,
     *'CURRENT',2(6X,I4),2(5X,F5.2))
      WRITE(ISHORT,145)(ATIME(I),I=1,3),ATIME(7)
  145 FORMAT(3X,'LINE  5 XCORE MIN  DEL.XCORE FRAC.XCORE DEL.XSHELL'/2X,
     *'STANDARD     0.001     0.020     0.500     0.100'/3X,'CURRENT',
     *4(4X,F6.3))
      WRITE(ISHORT,155)(ATIME(I),I=4,6)
  155 FORMAT(3X,'LINE  7 DEL.YCORE  FRAC.YCORE DEL.YSHELL'/2X,'STANDARD
     *    0.020     0.300    0.0015'/3X,'CURRENT',2(5X,F5.3),4X,F6.4)
      WRITE(ISHORT,165) LKUTHE
  165 FORMAT(3X,'LINE  8    LKUTHE'/,2X,
     *'STANDARD',9X,'F'/3X,'CURRENT',9X,L1)
      WRITE(ISHORT,175) CMIXL,DPENV,LOVSTC,ALPHAC,LOVSTE,ALPHAE
  175 FORMAT(3X,'LINE  9   CMIXL     DPENV    LOVSTC    ALPHAC    LOVSTE
     *    ALPHAE'/2X,'STANDARD',7X,'N/A',6X,'1.00',2(9X,'F',6X,'0.00')/
     *3X,'CURRENT',2(5X,F5.2),2(9X,L1,5X,F5.2))
      WRITE(ISHORT,185) LNEW0,LEXCOM
  185 FORMAT(3X,'LINE 10   LNEW0    LEXCOM'/2X,
     *'STANDARD',2(9X,'F')/3X,'CURRENT',2(9X,L1))
      WRITE(ISHORT,195) LROT,WALPCZ,LINSTB
  195 FORMAT(3X,'LINE 11      LROT    WALPCZ    LINSTB'/2X,'STANDARD',
     *7X,'N/A',6X,'0.00',7X,'N/A'/3X,'CURRENT',9X,L1,5X,F5.2,9X,L1)
      IF(KTTAU .EQ. 0) THEN
           WRITE(ISHORT, 197)
      ELSE IF (KTTAU .EQ. 1) THEN
           WRITE(ISHORT, 198)
      ELSE IF (KTTAU .EQ. 2) THEN
           WRITE(ISHORT, 1999)
      ELSE IF (KTTAU .EQ. 3) THEN
           WRITE(ISHORT, 1888)
      ELSE IF (KTTAU .EQ. 4) THEN
           WRITE(ISHORT, 1889)
C JNT 6/14 ADD FOR NEW KURUCZ/CASTELLI ATMOSPHERE TABLES
      ELSE IF (KTTAU .EQ. 5) THEN
           WRITE(ISHORT, 1887)
      END IF
  197 FORMAT(' USING EDDINGTON T-TAU RELATION.')
  198 FORMAT(' USING KRISHNA-SWAMY T-TAU RELATION.')
 1999 FORMAT(' USING HARVARD-SMITHSONIAN REFERENCE ATMOSPHERE')
 1888 FORMAT(' USING KURUCZ ATMOSPHERE TABLE')
 1889 FORMAT(' USING ALLARD ATMOSPHERE TABLE')
 1887 FORMAT(' USING KURUCZ/CASTELLI ATMOSPHERE TABLE')

C DBG PULSE
      IF (LPULSE) THEN
          WRITE(ISHORT,196)
  196     FORMAT(/,' CALCULATE PULSATION OUTPUT ON LAST MODEL')
      END IF
      IF (LPUREZ) THEN
          WRITE(ISHORT,*) ' USING PURE C AND N OPACITY TABLES'
      END IF
      WRITE(IMODPT,310) DESCRIP(1),  DESCRIP(2)
      WRITE(ISHORT,310) DESCRIP(1),  DESCRIP(2)
  310 FORMAT(/,' ',125('='),/,' ',' DESCRIPTION OF RUN: ', A80,/,
     *         ' ', 9X, '  ',8X,': ', A80,/,' ',130('='),/,' ')
      IF(LTRACK) THEN
         WRITE(ITRACK,320) DESCRIP(1), DESCRIP(2)
  320    FORMAT('#',/,'#',100('='),/,'#',' DESCRIPTION OF RUN: ', A80,/,
     *          '#',9X,'  ',8X,': ', A80,/,'#',100('='))
      ENDIF
      WRITE(ISHORT,323)
 323  FORMAT(' USING OSCILATORY SPLINE INTERPOLATION IN HPOINT')

C     INTERPRET RUN FROM SEQUENCE OF "KIND" CARDS

      WRITE(ISHORT,200)
  200 FORMAT(/35X,'RUN CARDS'/)

      LFIRST(1) = .TRUE.

C     RUN LOOP
      DO 1000 NKIND=1, NUMRUN
C READ IN NMODLS AND MODEL SOURCE(MEMORY OR FIRST MODEL)-SAME FOR ALL
       IRESCA(NKIND) = KINDRN(NKIND)
       IF(KINDRN(NKIND).EQ.1) THEN
C EVOLVE CARD
C MHP 10/24 GENERALIZE STOP CONDITIONS
C          LENDAG(NKIND) = ENDAGE(NKIND).GT.0D0
            IF(ENDAGE(NKIND).GT.0.0D0 .OR. END_DCEN(NKIND).GT.0.0D0
     * .OR. END_XCEN(NKIND).GT.0.0D0 .OR. END_YCEN(NKIND).GT.0.0D0)THEN
               LENDAG(NKIND)=.TRUE.
            ELSE
               LENDAG(NKIND)=.FALSE.
            ENDIF
          LSETDT(NKIND) = SETDT(NKIND).GT.0D0
            IF (NMODLS(NKIND).GT.0) THEN
          IF (LFIRST(NKIND)) THEN
             WRITE(IOWR,350) NKIND,NMODLS(NKIND)
             WRITE(ISHORT,350) NKIND,NMODLS(NKIND)
  350          FORMAT(/1X,'RUN #',I3,'   EVOLVE ',I5,
     1         ' MODELS, STARTING',
     2         ' WITH THE INPUT "FIRST MODEL".')
          ELSE
             WRITE(IOWR,351) NKIND, NMODLS(NKIND)
             WRITE(ISHORT,351) NKIND, NMODLS(NKIND)
  351          FORMAT(/1X,'RUN #',I3,'   EVOLVE ',I5,
     1         ' MODELS, STARTING',
     1         ' WITH THE PREVIOUS RUN''S LAST MODEL.')
          END IF
C GENERALIZE STOP CONDITIONS
          IF(LENDAG(NKIND).OR.LSETDT(NKIND)) THEN
             WRITE(IOWR,370)LENDAG(NKIND),LSETDT(NKIND),
     *              ENDAGE(NKIND), SETDT(NKIND),END_DCEN(NKIND),
     *         END_XCEN(NKIND),END_YCEN(NKIND)
             WRITE(ISHORT,370)LENDAG(NKIND),LSETDT(NKIND),
     *         ENDAGE(NKIND), SETDT(NKIND),END_DCEN(NKIND),
     *         END_XCEN(NKIND),END_YCEN(NKIND)
  370          FORMAT(1X,'EVOLVE TO AGE ',L1,' SET DELT ',
     *              L1,' FINAL AGE ', E9.2,' FIXED TSTEP ',E9.2,
     *  ' CENTRAL D ',E10.4,' CENTRAL X ',E12.4,' CENTRAL Y ',E12.4)
          ENDIF
            END IF
       ELSE IF(KINDRN(NKIND).EQ.2) THEN
C RESCALE CARD:  RESCALE STARTING MODEL
C QUANTITIES TO BE RESCALED STORED IN ARRAY RESCALE(4,50)
C WHERE THE ELEMENTS MASS,X,Z,CORE MASS ARE STORED IN ORDER
          RESCAL(1,NKIND) = RSCLM(NKIND)
          RESCAL(2,NKIND) = RSCLX(NKIND)
          RESCAL(3,NKIND) = RSCLZ(NKIND)
          RESCAL(4,NKIND) = RSCLCM(NKIND)
            IF (NMODLS(NKIND) .GT. 0) THEN
          IF (LFIRST(NKIND)) THEN
             WRITE(IOWR,450) NKIND
             WRITE(ISHORT,450) NKIND
  450          FORMAT(/1X,'RUN #',I3,
     1         '   RESCALE THE INPUT MODEL: "FIRST MODEL".')
          ELSE
             WRITE(IOWR,451) NKIND
             WRITE(ISHORT,451) NKIND
  451          FORMAT(/1X,'RUN #',I3,
     1         '   RESCALE THE PREVIOUS RUN''S LAST MODEL.')
          END IF
          WRITE(IOWR,452) NMODLS(NKIND),(RESCAL(I,NKIND),I = 1,4)
          WRITE(ISHORT,452) NMODLS(NKIND),
     1      (RESCAL(I,NKIND),I = 1,4)
  452       FORMAT(1X,'RELAX RESCALED MODEL',I3,
     *      ' TIMES. RESCALE THE FOLLOW',
     *      'ING(0=USE CURRENT VALUE):'/1X,'MASS ',
     *      F9.6,3X,'X',F9.6,3X,'Z',
     *      F9.6,3X,'CORE MASS',F9.6)
            END IF
         ELSE IF(KINDRN(NKIND).EQ.3) THEN
C RESCALE AND EVOLVE CARD:  RESCALE STARTING MODEL
C QUANTITIES TO BE RESCALED STORED IN ARRAY RESCALE(4,50)
C WHERE THE ELEMENTS MASS,X,Z,CORE MASS ARE STORED IN ORDER
            RESCAL(1,NKIND) = RSCLM(NKIND)
            RESCAL(2,NKIND) = RSCLX(NKIND)
            RESCAL(3,NKIND) = RSCLZ(NKIND)
            RESCAL(4,NKIND) = RSCLCM(NKIND)
            IF (LFIRST(NKIND)) THEN
               WRITE(IOWR,550) NKIND
               WRITE(ISHORT,550) NKIND
  550          FORMAT(/1X,'RUN #',I3,
     1         '   RESCALE & EVOLVE THE INPUT MODEL: "FIRST MODEL".')
            ELSE
               WRITE(IOWR,451) NKIND
               WRITE(ISHORT,451) NKIND
C   551          FORMAT(/1X,'RUN #',I3,
C      1         '   RESCALE & EVOLVE THE PREVIOUS RUN''S LAST MODEL.')
            END IF
            WRITE(IOWR,452) NMODLS(NKIND),(RESCAL(I,NKIND),I = 1,4)
            WRITE(ISHORT,452) NMODLS(NKIND),
     1      (RESCAL(I,NKIND),I = 1,4)
       END IF
         IF(RESCAL(3,NKIND).GE.0.0D0)  ZENV=RESCAL(3,NKIND)
 1000 CONTINUE
      RETURN
      END
