C $$$$$$
C       SUBROUTINE VCIRC(HJM,HR,HRU,IMIN,IMAX,IT,LCZ,M,OMEGA,LDO,  ! KC 2025-05-31
      SUBROUTINE VCIRC(HR,HRU,IMIN,IMAX,IT,LCZ,M,OMEGA,LDO,
     *                 QWLNR,QWRMAX,HV,CLTOT,DT,HP)

      PARAMETER (JSON=5000)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT LOGICAL*4(L)
      COMMON/CONST/CLSUN,CLSUNL,CLNSUN,CMSUN,CMSUNL,CRSUN,CRSUNL,CMBOL
      COMMON/CONST1/CLN,CLNI,C4PI,C4PIL,C4PI3L,CC13,CC23,CPI
      COMMON/CONST2/CGAS,CA3,CA3L,CSIG,CSIGL,CGL,CMKH,CMKHN
      COMMON/CCOUT/LSTORE,LSTATM,LSTENV,LSTMOD,LSTPHYS,LSTROT,LSCRIB,LSTCH,LPHHD
      COMMON/INTFAC/FACI(4,JSON)
C MHP 3/92 COMMON BLOCKS ADDED FOR SHEAR VELOCITY AND MU INHIBITION.
      COMMON/TAUKH/FACT6(JSON),FES1(JSON),FES2(JSON),FGSFJ(JSON),
     *     FGSFK(JSON),FES3(JSON)
      COMMON/INTVAR/ALM(JSON),DELAMI(JSON),DELMI(JSON),DM(JSON),
     *     EPSILM(JSON),HGM(JSON),HS3(JSON),PM(JSON),
     *     QDTMI(JSON),RM(JSON),TM(JSON)
C      JvS 09/25 RENAMED ARRAYS IN INTVR2 TO PLAY NICELY WITH MDPHY     
C      COMMON/INTVR2/AMUM(JSON),THDIFM(JSON),VISCM(JSON),WM(JSON)
      COMMON/INTVR2/AMUMI(JSON),THDIFMI(JSON),VISCMI(JSON),WM(JSON)
      COMMON/LUOUT/ILAST,IDEBUG,ITRACK,ISHORT,IMILNE,IMODPT,ISTOR,IOWR
C      JvS 09/25 CHANGED VARIABLE NAMES TO BE CONSISTENT ACROSS ALL SUBROUTINES
C      COMMON/MDPHY/HAMU(JSON),CP(JSON),DELM(JSON),DELAM(JSON),
C     *     DELRM(JSON),SESUM(JSON),OM(JSON),SQDT(JSON),
C     *     THDIF(JSON),SVEL(JSON),VISC(JSON),EPSM(JSON)
      COMMON/MDPHY/AMUM(JSON),CPM(JSON),DELM(JSON),DELAM(JSON),
     *             DELRM(JSON),ESUMM(JSON),OM(JSON),QDTM(JSON),
     *             THDIFM(JSON),VELM(JSON),VISCM(JSON),EPSM(JSON)
      COMMON/TEMP2/VES(JSON),VES0(JSON),VSS(JSON),VSS0(JSON),
     *     HLE(JSON),VGSF(JSON),VGSF0(JSON),VMU(JSON)
C MHP 06/02 ADDED FACT7 AND FACT8 FOR DIF/AD TREATMENT
      COMMON/VFACT/FACT1(JSON),FACT2(JSON),FACT3(JSON),FACT4(JSON),
     *     FACT5(JSON),FACT7(JSON),FACT8(JSON)
      COMMON/VMULT/FW,FC,FO,FES,FGSF,FMU,FSS,RCRIT
      COMMON/VMULT2/FESC,FSSC,FGSFC,IES,IGSF,IMU
      COMMON/PREVMU/VMUP(JSON)
C 3/93 QUADRUPOLE DRIVING TERM ADDED.
      COMMON/QUADD/PHISP(JSON),PHIROT(JSON),PHIDIS(JSON),RAT(JSON)
      COMMON/QUADRU/QUAD(JSON),GG(JSON)
C MHP 9/93
      COMMON/NOTRAN/LNOJ
      COMMON/VARFC/VFC(JSON),LVFC,LDIFAD
C MHP 11/94 ADVECTIVE VELOCITY AND DIFFUSIVE COMPONENT.
      COMMON/DIFAD2/VESA(JSON),VESA0(JSON),VESD(JSON),VESD0(JSON)
C MHP 06/02
C HIGHER ORDER TERMS IN M.C. VELOCITY
      COMMON/DIFAD3/FACD2(JSON),FACD3(JSON),VESD2(JSON),VESD3(JSON),
     *              ECOD5(JSON),ECOD6(JSON),FGEOM(JSON),FV0(JSON),
     *              FV1A(JSON),FV1B(JSON),FV2A(JSON),FV2B(JSON),
     *              EV0(JSON),EV1A(JSON),EV1B(JSON),EV2A(JSON),
     *              EV2B(JSON),DSS(JSON),DGSF(JSON),ESS(JSON),EGSF(JSON)
C Time change of theta
      COMMON/OLDROT2/THO(JSON),THN(JSON),THM(JSON),
     *               DDELM(JSON),FESTIME(JSON),THP(JSON),
     *               QWRST(JSON),WMST(JSON),QWRMST(JSON)
C DEFINITION TERMS FOR THE SECOND AND THIRD DERIVATIVE
C TERMS
      COMMON/EGRIDDER/EQQCOD(JSON),EQQQCOD(JSON),QQCOD(JSON),
     *                QQQCOD(JSON)
C       DIMENSION HJM(JSON),HR(JSON),HRU(JSON),LCZ(JSON),OMEGA(JSON),  ! KC 2025-05-31
      DIMENSION HR(JSON),HRU(JSON),LCZ(JSON),OMEGA(JSON),
     *          QWLNR(JSON),QWRMAX(JSON),HV(JSON),  ! VMU2(JSON)
     *          HP(JSON)
C SPEED OF LIGHT.
C       DATA CC/2.99792458D10/
      SAVE

C   SKIPPING CONVECTIVE REGIONS, CHECK FOR INSTABILITY AGAINST EACH
C   SECULAR MECHANISM.IF UNSTABLE,COMPUTE A CIRCULATION VELOCITY.
C   THE PROCEDURE FOR CALCULATING STABILITY IS AS FOLLOWS:
C      STABILITY IS CALCULATED FOR THE I/I-1 INTERFACE.
C      EACH STABILITY CRITERION IS EXPRESSED AS FOLLOWS:
C       A COMBINATION OF VARIABLES(RHO,P,ETC.)STORED AT EACH SHELL
C       MULTIPLIED BY A GRADIENT BETWEEN THE SHELLS MUST BE LESS THAN
C       SOME CRITICAL NUMBER.

      LDO = .FALSE.
C  STORE THE OLD VELOCITY ESTIMATES FOR LATER USE.
      IF(IT.GT.1)THEN
         DO 5 I = IMIN,IMAX
            VMUP(I) = VMU(I)
            VGSF0(I) = VGSF(I)
            VES0(I) = VES(I)
            VSS0(I) = VSS(I)
    5    CONTINUE
         IF(LDIFAD)THEN
            DO I = IMIN,IMAX
               VESA0(I) = VESA(I)
               VESD0(I) = VESD(I)
            END DO
         ENDIF
      ENDIF
      DO 10 I = 1,M
         HV(I) = 0.0D0
         VES(I) = 0.0D0
         VGSF(I) = 0.0D0
         VSS(I) = 0.0D0
         VMU(I) = 0.0D0
   10 CONTINUE
C  MEAN MOLECULAR WEIGHT (AS WELL AS QUANTITIES WHICH DEPEND ON IT) AND
C  THE ANGULAR VELOCITY DISTRIBUTION CHANGE DURING A DIFFUSION TIMESTEP.
C  FIND THE NEW VALUES AT THE MIDPOINT IN RADIUS BETWEEN MASS SHELLS
C  WHERE STABILITY IS EVALUATED.  4 POINT LAGRANGIAN INTERPOLATION IS USED
C  FOR THE KINEMATIC VISCOSITY AND THERMAL DIFFUSIVITY.
C  TREATMENT OF FIRST INTERFACE.
      IF(IMIN.LT.3)THEN
         VISCMI(2)=EXP(LOG(VISCM(1))*FACI(1,2)+LOG(VISCM(2))*FACI(2,2)+
     *            LOG(VISCM(3))*FACI(3,2)+LOG(VISCM(4))*FACI(4,2))
         THDIFMI(2)=EXP(LOG(THDIFM(1))*FACI(1,2)+LOG(THDIFM(2))*FACI(2,2)
     *            +LOG(THDIFM(3))*FACI(3,2)+LOG(THDIFM(4))*FACI(4,2))
         I0=3
      ELSE
         I0=IMIN
      ENDIF
C  TREATMENT OF LAST INTERFACE.
      IF(IMAX.EQ.M)THEN
         VISCMI(M)=EXP(LOG(VISCM(M-3))*FACI(1,M)+LOG(VISCM(M-2))*FACI(2,M)
     *            +LOG(VISCM(M-1))*FACI(3,M)+LOG(VISCM(M))*FACI(4,M))
         THDIFMI(M)=EXP(LOG(THDIFM(M-3))*FACI(1,M)+LOG(THDIFM(M-2))*
     *            FACI(2,M)+LOG(THDIFM(M-1))*FACI(3,M)+
     *            LOG(THDIFM(M))*FACI(4,M))
         I1=M-1
      ELSE
         I1=IMAX
      ENDIF
C  GENERAL CASE.
      DO 20 I = I0,I1
         VISCMI(I)=EXP(LOG(VISCM(I-2))*FACI(1,I)+LOG(VISCM(I-1))
     *            *FACI(2,I)+LOG(VISCM(I))*FACI(3,I)+LOG(VISCM(I+1))
     *            *FACI(4,I))
         THDIFMI(I)=EXP(LOG(THDIFM(I-2))*FACI(1,I)+LOG(THDIFM(I-1))
     *            *FACI(2,I)+LOG(THDIFM(I))*FACI(3,I)+LOG(THDIFM(I+1))
     *            *FACI(4,I))
   20 CONTINUE
C USE LINEAR INTERPOLATION FOR OMEGA AND MU.
      DO I = 2,M
         AMUMI(I) = 0.5D0*(AMUM(I)+AMUM(I-1))
         WM(I) = 0.5D0*(OMEGA(I)+OMEGA(I-1))
      END DO
C MHP 8/03 OMITTED OLD KM1974 MERIDIONAL CIRCULATION VELOCITY ESTIMATE.
C THE IES FLAG IS THEREFORE NO LONGER IN USE.
C
C KIPPENHAHN AND MOLLENHOF(1974) MERIDIONAL CIRCULATION VELOCITY.
C      IF(IES.EQ.2)THEN
C         DO 30 I = IMIN,IMAX
C  SKIP CONVECTIVE INTERFACES.
C            IF(LCZ(I).AND.LCZ(I-1))GOTO 30
C  EDDINGTON CIRCULATION.  VELOCITY DEFINED IN SR SETUPV.
C            DR = HRU(I)-HRU(I-1)
C            DV = ((OMEGA(I)*HRU(I))**2-(OMEGA(I-1)*HRU(I-1))**2)/DR
C QUADRUPOLE TERM, AS PER ZAHN (1992), ADDED.
C            GMID = 0.5D0*(GG(I)+GG(I-1))
C THE VARIATION IN GRAVITY ON A LEVEL SURFACE CAN BE EXPRESSED IN
C GENERAL AS 1/3 OMEGA**2 *D/DR((R**2 - PHI)/G), WHERE G IS THE
C LOCAL AVERAGE GRAVITY (~GM/R**2) AND PHI IS THE QUADRUPOLE MOMENT.
C THE CLASSICAL EXPRESSION NEGLECTS THE QUADRUPOLE AND THE SPATIAL
C DERIVATIVE OF THE MASS (PHISTD).  THE VELOCITY ESTIMATE FOR
C MERIDIONAL CIRCULATION IS THEREFORE MULTIPLED BY THE RATIO OF
C THE CORRECTED EXPRESSION TO THE CLASSICAL ONE (RAT).
C            PHISTD = 2.0D0*CC23*WM(I)**2*RM(I)/GMID
C            PHIS2 = CC13*WM(I)**2*(HRU(I)**2/GG(I)-
C     *              HRU(I-1)**2/GG(I-1))/DR
C            PHI2 = (QUAD(I-1)/GG(I-1)-QUAD(I)/GG(I))/DR
C            RAT(I) = (PHIS2+PHI2)/PHISTD
C            RAT(I) = PHIS2/PHISTD
C            VES(I) = ABS(FACT1(I)*(FACT2(I)*RAT(I)*WM(I)**2
C     *               +FACT6(I)*DV))
C   30    CONTINUE
C      ELSE
C ZAHN (1991) VELOCITY ESTIMATE.
      DO 31 I = IMIN,IMAX
         IF(LCZ(I).AND.LCZ(I-1))GOTO 31
C ORIGINAL ESTIMATE,USING DG/G = W**2 R**3 / GM.
         VES(I) = WM(I)**2*(FES1(I)+WM(I)**2*FES2(I))
C QUADRUPOLE TERM ADDED, DG/G COMPUTED AS PER ZAHN 1992.
         DR = HRU(I) - HRU(I-1)
         GMID = 0.5D0*(GG(I)+GG(I-1))
         PHISTD = 2.0D0*CC23*WM(I)**2*RM(I)/GMID
         PHIS2 = CC13*WM(I)**2*(HRU(I)**2/GG(I)-
     *           HRU(I-1)**2/GG(I-1))/DR
         PHI2 = (QUAD(I-1)/GG(I-1)-QUAD(I)/GG(I))/DR
         QW = WM(I)*(OMEGA(I)-OMEGA(I-1))/DR
         RAT(I) = (PHIS2+PHI2)/PHISTD
         IF(RAT(I).LT.0.0D0)THEN
            WRITE(*,303)I,RAT(I),PHISTD,PHIS2,PHI2,
     *      QUAD(I),QUAD(I-1),GG(I),GG(I-1),HRU(I),
     *      HRU(I-1)
 303        FORMAT(I5,' RAT ',1PE10.3,' POT SPH,CYL,QUA',
     *             3E10.3/' QUA,G,R ',6E12.3)
         ENDIF
         IF(.NOT.LDIFAD)THEN
            VES(I) = ABS(RAT(I)*VES(I)-FES3(I)*QW)
         ELSE
C MHP 05/02 ADD FACTOR OF 1/5 HERE
C               VESA(I) = RAT(I)*VES(I)
C               VESD(I) = ABS(FES3(I)*WM(I)**2)
C MHP 06/02 ADDED D THETA/DT TERM
            THN(I) = FESTIME(I)*(THM(I)*QW-THP(I))/DT
            VESA(I) = 0.2D0*(RAT(I)*VES(I)+THN(I))
            Q1 = FACT7(I)*WM(I)**2
            Q2 = FACT8(I)*QW
            Q0 = FES3(I)*WM(I)**2
C               VESD(I) = 0.2D0*ABS(FES3(I)*WM(I)**2)
C               VESD(I) = 0.2D0*ABS(Q0+Q1+Q2)
            VESD(I) = 0.2D0*(Q0+Q1+Q2)
C SECOND ORDER TERM
            VESD2(I) = 0.2D0*FACD2(I)*WM(I)
C THIRD ORDER TERM
            VESD3(I) = 0.2D0*FACD3(I)*WM(I)
C               VES(I) = ABS(RAT(I)*VES(I)+THN(I)-FES3(I)*QW)
            VES(I) = RAT(I)*VES(I)+THN(I)+
     *               (FES3(I)+FACT7(I))*QW+
     *               FACT8(I)*((OMEGA(I)-OMEGA(I-1))/DR)**2
            EQQCOD(I) = QQCOD(I)*WM(I)
         ENDIF
   31 CONTINUE
C      ENDIF
C INHIBITION CAUSED BY GRADIENTS IN MEAN MOLECULAR WEIGHT.
C INCLUDE ONLY THE ZAHN & MAEDER 1998 TREATMENT, WHERE (DEL - DEL AD) IS
C REPLACED BY (DEL + DEL MU - DEL AD).  RETAIN IMU FLAG FOR LATER USE.
C      IF(IMU.EQ.3)THEN
C  FICTITIOUS MU CURRENTS THAT OPPOSE ES CIRCULATION CALCULATED HERE.
C         DO 32 I = IMIN,IMAX
C            IF(LCZ(I).AND.LCZ(I-1))GOTO 32
C SQUARE ROOT OF TKH*,KIPPENHAHN,IAU#66,P.23,USING EQ.(12)FOR D ON P.25.
C NOTE FACTOR OF G IS SUBSUMED IN FACT4.
C            TKHS = SQRT(VISCMI(I)*CC/THDIFMI(I))
C            QMU = (AMUM(I)-AMUM(I-1))/(HRU(I)-HRU(I-1))
C            VMU(I) = ABS(FMU*FACT1(I)*FACT4(I)*AMUMI(I)*QMU/TKHS)
C            VMU2(I)=FMU*HGM(I)*ABS(QMU)/AMUMI(I)/WM(I)**2
C   32    CONTINUE
C LOCAL TIMESCALE ESTIMATE FOR MU INHIBITION.
C ASSUMES V/L = OMEGA.
C      ELSE IF(IMU.EQ.2)THEN
C MHP 06/02 REPLACE WITH THE ZAHN&MAEDER 1998 PRESCRIPTION
       DO I = IMIN,IMAX
          QMU = LOG(AMUM(I))-LOG(AMUM(I-1))
          QP = CLN*(HP(I)-HP(I-1))
          DDEL=DDELM(I)+ QMU/QP
          DDTEST = MAX(DDELM(I),1.0D-3)
          DDTEST2 = MAX(DDEL,1.0D-3)
          QQQ = DDTEST/DDTEST2
          VES(I) = VES(I)*QQQ
          IF(LDIFAD)THEN
             VESA(I) = VESA(I)*QQQ
             VESD(I) = VESD(I)*QQQ
             VESD2(I) = VESD2(I)*QQQ
             VESD3(I) = VESD3(I)*QQQ
          ENDIF
          Q1 = FACT7(I)*WM(I)**2*QQQ
          Q0 = FES3(I)*WM(I)**2*QQQ
          DR = HRU(I) - HRU(I-1)
          V2 = 0.2D0*(Q0+Q1)*(OMEGA(I)-OMEGA(I-1))/DR/WM(I)
C ADD MU GRADIENTS TO VELOCITY ESTIMATES
          FESTIME(I) = FESTIME(I)*QQQ
          FV0(I) = FV0(I)*QQQ
C         WRITE(*,911)I,WM(I),VESA(I),V2,Q0,Q1,THN(I),VES(I),QQQ
C 911           FORMAT(I5,1P8E12.3)
       END DO
C         DO 33 I = IMIN,IMAX
C            IF(LCZ(I).AND.LCZ(I-1))GOTO 33
C            DR = HRU(I) - HRU(I-1)
C            VMU(I)=FMU*HGM(I)*ABS(AMUM(I)-AMUM(I-1))/DR/AMUMI(I)
C     *             /WM(I)**2
C   33    CONTINUE
C ALTERNATE EXPRESSION : D = D0/(1+R*DEL MU/MU)
C THIS IS ACTUALLY SIMILAR TO THE ZM98 FORMULA, THEREFORE OBSOLETE.
C SHOULD HAVE PUBLISHED IT - OH WELL.
C      ELSE
C         DO 34 I = IMIN,IMAX
C            IF(LCZ(I).AND.LCZ(I-1))GOTO 34
C            DR = HRU(I) - HRU(I-1)
C            DDEL = DELAMI(I)/MAX(1.0D-6,DELAMI(I)-DELMI(I))
C            VMU(I)=FMU*RM(I)*DDEL*ABS(AMUM(I)-AMUM(I-1))/DR/AMUMI(I)
C 34         CONTINUE
C      ENDIF
C  GSF INSTABILITY.  VELOCITY DEFINED IN SR SETUPV.
C OMIT ALL BUT THE KIPPENHAHN 1980 ESTIMATE.
C IGSF IS RETAINED, AND THE VALUE DETERMINES WHAT IS PERMITTED TO
C INHIBIT IT.
C IGSF = 0: INHIBITED BY VISCOSITY AND MU GRADIENTS
C IGSF = 1: NEITHER VISCOSITY NOR MU GRADIENTS INHIBIT
C IGSF = 2: INHIBITED BY VISCOSITY ONLY
C NOTE THAT THE ABCD INSTABILITY - RELATED TO THE GSF INSTABILITY -
C WOULD NOT BE INHIBITED BY VISCOSITY/MU GRADIENTS, SO INCLUDING IT
C IS EQUIVALENT TO SETTING IGSF=1 (THE ORIGINAL K1980 ESTIMATE).
C THE INHIBITION FACTORS COME FROM SUBSEQUENT WORK BY SPRUIT.
C      IF(IGSF.EQ.0 .OR. IGSF.EQ.2 .OR. IGSF.EQ.1)THEN
c KIPPENHAHN (1980) ESTIMATE
      DO 40 I = IMIN,IMAX
         IF(LCZ(I).AND.LCZ(I-1))GOTO 40
C MHP 8/93 STABILITY CONDITION ADDED, NEGLECTING THE EFFECTS OF
C MU GRADIENTS.
         IF(IGSF.EQ.2 .OR. IGSF.EQ.0)THEN
            QWRMX = 2.0D0*SQRT(VISCMI(I)/THDIFMI(I))*QWRMAX(I)
            IF(ABS(QWLNR(I)).LT.QWRMX)THEN
               VGSF(I) = 0.0D0
               GOTO 40
            ELSE
              FXX = SQRT((ABS(QWLNR(I))-QWRMX)/QWRMX)
            ENDIF
         ELSE
            FXX = 1.0D0
         ENDIF
         DR = HRU(I)-HRU(I-1)
         IF(IGSF.EQ.0)THEN
            QWRMX=2.0D0*SQRT(HGM(I)*ABS(AMUM(I)-AMUM(I-1))
     *            /DR/AMUMI(I))
            IF(ABS(QWLNR(I)).LT.QWRMX)THEN
               VGSF(I) = 0.0D0
               GOTO 40
            ELSE
C MHP 05/02 ADDED TESTS TO AVOID DIVIDE BY ZERO
C                  FXX2 = SQRT((ABS(QWLNR(I))-QWRMX)/QWRMX)
               QQ = 1.0D-2*QWLNR(I)
               IF(ABS(QWRMX).LT.ABS(QQ))THEN
                  FXX2 = 1.0D0
               ELSE
                  IF(ABS(QWRMX).LT.1.0D-20)THEN
                     FXX2 = 1.0D0
                  ELSE
                     FXX2 = SQRT((ABS(QWLNR(I))-QWRMX)/QWRMX)
                  ENDIF
               ENDIF
               FXX = MIN(FXX,FXX2)
            ENDIF
         ENDIF
         RMID = 0.5D0*(HRU(I)+HRU(I-1))
         DLNWDR = ABS(LOG(OMEGA(I))-LOG(OMEGA(I-1)))/DR
C GSF IS TRIGGERED BY D OMEGA/DZ NONZERO (I.E. ROTATION NOT
C ON CYLINDERS,WHICH IS TRUE IN GENERAL IN OUR MODELS), OR
C BY D LN(J/M)/DR < 0, WHICH SOMETIMES OCCURS.
C IF D LN(J/M)/DR < 0, CHECK SECOND CRITERIA AND USE THE LARGEST
C VELOCITY; OTHERWISE,USE ONLY D OMEGA/DZ NON-ZERO CRITERION.
         IF(OMEGA(I)*HRU(I)**2.LT.OMEGA(I-1)*HRU(I-1)**2)THEN
            DLNJMDR = ABS(2.0D0/RMID+(LOG(OMEGA(I))-
     *                LOG(OMEGA(I-1)))/DR)
            FX = MAX(2.0D0*DLNJMDR,0.25D0*DLNWDR)
C FACTOR OF R IN THE DENOMINATOR OCCURS BECAUSE ALL THE CIRCULATION
C VELOCITIES ARE LATER MULTIPLIED BY R (THE "LENGTH SCALE").
            VGSF(I) = FGSFK(I)*FX*THDIFMI(I)*WM(I)**2/RMID
         ELSE
            VGSF(I)=0.25D0*FGSFK(I)*THDIFMI(I)*DLNWDR*WM(I)**2/RMID
         ENDIF
         VGSF(I) = ABS(FXX*VGSF(I))
   40 CONTINUE
C OMIT JAMES AND KAHN ESTIMATE
C      ELSE
C JAMES AND KAHN (1971) ESTIMATE.
C NOTE FACTOR OF OMEGA**4, WHICH IS PART OF THE MERIDIONAL
C CIRCULATION VELOCITY ESTIMATE.
C         DO 41 I = IMIN,IMAX
C            IF(LCZ(I).AND.LCZ(I-1))GOTO 41
C MHP 8/93 STABILITY CONDITION ADDED, NEGLECTING THE EFFECTS OF
C MU GRADIENTS.
C            QWRMX = 2.0D0*SQRT(VISCMI(I)/THDIFMI(I))*QWRMAX(I)
C            IF(ABS(QWLNR(I)).LT.QWRMX)THEN
C               VGSF(I) = 0.0D0
C               GOTO 41
C            ELSE
C               FXX = SQRT((ABS(QWLNR(I))-QWRMX)/QWRMX)
C            ENDIF
C            DR = HRU(I)-HRU(I-1)
C            RMID = 0.5D0*(HRU(I)+HRU(I-1))
C            DLNJMDR = ABS(2.0D0/RMID+(LOG(OMEGA(I))-
C     *                LOG(OMEGA(I-1)))/DR)
C            IF(IGSF.EQ.3)THEN
C               DWDR = abs(OMEGA(I)-OMEGA(I-1))/DR
C               VGSF(I) = 2.0D0*FGSFJ(I)*DWDR**2
C               VGSF(I) = ABS(VGSF(I))
C            ELSE IF(IES.EQ.2)THEN
C               VGSF(I) = 2.0D0*VES(I)*FACT3(I)*DLNJMDR**2
C            ELSE
C               VGSF(I) = 2.0D0*FGSFJ(I)*(DLNJMDR*WM(I))**2
C               VGSF(I) = ABS(FXX*VGSF(I))
C            ENDIF
C   41    CONTINUE
C      ENDIF
C  DIFFUSIVE AND DYNAMICAL SHEAR INSTABILITIES - REF. ENDAL&SOFIA PAPER II.
      DO 60 I = IMIN,IMAX
C  CHECK FOR OPERATION OF DYNAMICAL SHEAR.
C  IF DYNAMICAL SHEAR IS OPERATING,SET SECULAR SHEAR VELOCITY TO MAXIMUM
C  VALUE AND COMPUTE (LARGE) DYNAMICAL SHEAR VELOCITY.
         IF(ABS(QWLNR(I)).GT.QWRMAX(I))THEN
            QWR = ABS(QWLNR(I))
            VSS(I)=8.0D0/4.5D1*THDIFMI(I)*(QWR/QWRMAX(I))**2/RM(I)
C  CORRECT GSF VELOCITY AS WELL.
            DR = HRU(I)-HRU(I-1)
            RMID = 0.5D0*(HRU(I)+HRU(I-1))
            IF(OMEGA(I).LT.OMEGA(I-1))THEN
               WMIN = OMEGA(I) + QWRMAX(I)*CLN*(HR(I)-HR(I-1))
               WMID = OMEGA(I) + QWRMAX(I)*CLN*(HR(I)-LOG10(RMID))
            ELSE
               WMIN = OMEGA(I) - QWRMAX(I)*CLN*(HR(I)-HR(I-1))
               WMID = OMEGA(I) - QWRMAX(I)*CLN*(HR(I)-LOG10(RMID))
            ENDIF
            DLNWDR0 = abs(LOG(OMEGA(I))-LOG(OMEGA(I-1)))/DR
            DLNJMDR0 = ABS(2.0D0/RMID+(LOG(OMEGA(I))-
     *                   LOG(OMEGA(I-1)))/DR)
            DLNJMDR = abs(2.0D0/RMID+(LOG(OMEGA(I))-log(wmin))/DR)
            DLNWDR = abs(LOG(OMEGA(I))-LOG(WMIN))/DR
C MHP 05/02 ADDED FIRST BRANCH FOR IGSF=0 - SOMEHOW
C MISSED IN CODE CHANGES EARLIER!
c kippenhahn (1980) estimate
C OMIT BRANCH FOR JAMES AND KAHN.
C            IF(IGSF.EQ.2 .OR. IGSF.EQ.1 .OR. IGSF.EQ.0)THEN
            IF(OMEGA(I)*HRU(I)**2.LT.WMIN*HRU(I-1)**2)THEN
               FX = MAX(2.0D0*DLNJMDR,0.25D0*DLNWDR)
               FX2 = MAX(2.0D0*DLNJMDR0,0.25D0*DLNWDR0)
               VGSF(I) = VGSF(I)*FX/FX2
            ELSE
               VGSF(I)=VGSF(I)*DLNWDR/DLNWDR0
            ENDIF
C            ELSE IF(IGSF.EQ.3)THEN
C               DWDR = abs(OMEGA(I)-WMIN)/DR
C               DWDR0 = ABS(OMEGA(I)-OMEGA(I-1))/DR
C               VGSF(I) = VGSF(I)*(DWDR/DWDR0)**2
C            ELSE IF(IES.EQ.2)THEN
C               VGSF(I) = VGSF(I)*(DLNJMDR/DLNJMDR0)**2
C            ELSE
C               WMID0 = 0.5D0*(OMEGA(I)+OMEGA(I-1))
C               VGSF(I) = VGSF(I)*(DLNJMDR*WMID/DLNJMDR0/WMID0)**2
C            ENDIF
            WRITE(6,9911)I,OMEGA(I),OMEGA(I-1),WMIN
 9911       FORMAT(1X,'DYNAMICAL SHEAR-SHELL',I5,1P,' WTOP',E11.3,
     *             ' WBOT',E11.3,' LIMIT',E11.3)
            GOTO 60
C *** END OF CHANGED SECTION
         ENDIF
C   FIND MAXIMUM GRADIENT IN OMEGA ALLOWED BY SECULAR SHEAR.
C   THE RUN OF QWRMAX INPUT IS THAT ALLOWED BY THE DYNAMICAL SHEAR;
C   THE SECULAR SHEAR RICHARDSON # IS RELATED BY
C   RICHNO(SECULAR) = PRANDTL# * CRITICAL REYNOLDS#/8 * RICHNO(DYNAMICAL)
C   PRANDTL # = KINEMATIC VISCOSITY/THERMOMETRIC DIFFUSIVITY.
C MHP 3/92 SQUARE ROOT OF PR# NEEDED, NOT PR # - ERROR CORRECTED!
C THE VELOCITY ESTIMATE HERE IS FROM ZAHN 1991.
         QWRMX = SQRT(VISCMI(I)/THDIFMI(I)*1.25D-1*RCRIT)*QWRMAX(I)
         IF(ABS(QWLNR(I)).GT.QWRMX) THEN
C  UNSTABLE; CHECK FOR MU GRADIENTS.
            IF(ABS((AMUM(I)-AMUM(I-1))/AMUMI(I)).LT.1.0D-10) THEN
               QWRMX2 = 0.0D0
               QWR = ABS(QWLNR(I)) - QWRMX
               VSS(I)=8.0D0/4.5D1*THDIFMI(I)*(QWR/QWRMAX(I))**2/RM(I)
            ELSE
C  CHECK FOR EFFECTS OF MU GRADIENT.
C  RICHNO = RHO/P*(-d lnT/d lnMU)*(del MU)/(del P)*(G/QWLNR)**2
C  WHERE -d lnT/d lnMU = (CON-1)/(1+3CON),CON=(a/3)T**4/P
C  GIVEN (1 - CON)P = CGAS*RHO*T/MU
C      FACT = (RHOM/PM)*QTMU*DMU/AMUMI/DP*HGM**2
               QWRMX2 = 2.0D0*SQRT(MAX(1.0D-20,FACT5(I)*
     *                  ABS((AMUM(I)-AMUM(I-1))/AMUMI(I))))
               IF(ABS(QWLNR(I)).GT.QWRMX2) THEN
C  INTERFACE UNSTABLE WITH RESPECT TO BOTH CONDITIONS; CHOOSE THE
C  MAXIMUM GRADIENT IMPLIED BY THE SECOND CONDITION IF IT'S LARGER
C  THAN THE FIRST(I.E. IF A MU GRADIENT IS SLOWING J TRANSPORT).
                  QWRMX = MAX(QWRMX2,QWRMX)
                  QWR = ABS(QWLNR(I)) - QWRMX
            VSS(I)=8.0D0/4.5D1*THDIFMI(I)*(QWR/QWRMAX(I))**2/RM(I)
               ENDIF
            ENDIF
         ENDIF
   60 CONTINUE
C  NOW DETERMINE WHETHER OR NOT MU GRADIENTS ARE STEEP ENOUGH TO
C  INHIBIT TRANSPORT.  MULTIPLY THE RESULTING VELOCITY ESTIMATES
C  BY THE USER DEFINED PARAMETERS FES AND FGSF.
C  IMU=3 KIPPENHAHN AND MOLLENHOF(1974)METHOD;IMU=2 LOCAL DAMPING
C  FACTOR METHOD.
C AGAIN, OMIT OBSOLETE MU GRADIENT TREATMENTS.
C      IF(IMU.EQ.3)THEN
C         IF(IT.GT.1)THEN
C            DO I = 1,M
C               VMU(I) = 0.5D0*(VMU(I)+VMUP(I))
C            END DO
C         ENDIF
C         DO I = IMIN,IMAX
C            FM = 1.0D0+VMU2(I)
C            RMID = 0.5D0*(HRU(I)+HRU(I-1))
C            FCC = SQRT(FC*FESC)
C            VEST=MAX(0.0D0,FES*VES(I)-SQRT(FES*VES(I)*RMID)
C     *               *FCC*VMU(I))
C            IF(VEST.LE.0.0D0)THEN
C               VES(I) = ABS(FES*VES(I)/FM)
C            ELSE
C               VES(I) = VEST
C            ENDIF
C            FCC = SQRT(FC*FGSFC)
C            IF(VGSF(I).GT.0.0D0)THEN
C               VGSFT=MAX(0.0D0,FGSF*VGSF(I)-SQRT(FGSF*VGSF(I)*RMID)
C     *               *FCC*VMU(I))
C            ELSE
C               VGSFT = 0.0D0
C            ENDIF
C            IF(VGSFT.LE.0.0D0)THEN
C               VGSF(I) = ABS(FES*VGSF(I)/FM)
C            ELSE
C               VGSF(I) = VGSFT
C            ENDIF
C            VSS(I)=MAX(0.0D0,FSS*VSS(I))
C         END DO
C      ELSE
C            IF(IMU.NE.2)THEN
C               FM = 1.0D0+VMU(I)
C            ELSE
C               FM = 1.0D0
C            ENDIF
C            VES(I)=ABS(FES*VES(I)/FM)
C MHP 05/02 ONLY DO THIS IF MU GRADIENTS NOT
C ALREADY ACCOUNTED FOR
C            VGSF(I)=ABS(FGSF*VGSF(I)/FM)
C            IF(IGSF.NE.0)THEN
C               VGSF(I)=ABS(FGSF*VGSF(I)/FM)
C            ELSE
C               VGSF(I) = FGSF*VGSF(I)
C            ENDIF
C ALREADY INCLUDED - ONLY USE SCALE FACTOR
C            VSS(I)=ABS(FSS*VSS(I)/FM)
C            VSS(I)= FSS*VSS(I)
C         END DO
C MHP 8/03 MULTIPLY VELOCITY ESTIMATES BY USER PARAMETER
C SCALE FACTORS
      DO I = IMIN,IMAX
         VES(I)=ABS(FES*VES(I))
         VGSF(I) = FGSF*VGSF(I)
         VSS(I)= FSS*VSS(I)
      END DO
C MHP 11/94
C REPEAT FOR DIF+AD
      IF(LDIFAD)THEN
         DO I = IMIN,IMAX
               VESD(I)=ABS(FES*VESD(I))
               VESA(I)=FES*VESA(I)
         END DO
      ENDIF
C               IF(IMU.NE.2)THEN
C                  FM = 1.0D0+VMU(I)
C               ELSE
C                  FM = 1.0D0
C               ENDIF
C               FM = 1.0D0+VMU(I)
C               VESD(I)=ABS(FES*VESD(I)/FM)
C               VESA(I)=FES*VESA(I)/FM
C            END DO
C         ENDIF
C      ENDIF
      IF(LDIFAD)THEN
C MHP 05/02
C CHANGED TO REFLECT THE DIFFERENT TREATMENT OF THE GSF INSTABILITY.
C THE ENDAL AND SOFIA VARIANT HAD V=THDIF*DLNWDR*W**2/R WHICH WAS
C THEN ADDED TO A DIFFUSION EQUATION D/DR(CON*V*R*DW/DR).
C IN THE ZAHN FORMULISM, WE ARE SOLVING AN EQUATION OF THE FORM
C D/DR(CON*V*W).  BECAUSE THE VELOCITY ESTIMATE ITSELF INCLUDES
C DW/DR THIS IS IN EFFECT A DIFFUSION TERM.  SO...WE NEED TO
C MULTIPLY THE ORIGINAL VELOCITY BY W AND DIVIDE BY DW/DR TO CAST
C IT AS AN ENTRY IN THE DIFFUSION EQUATION.
         DO I = IMIN,IMAX
            VESD(I) = VESD(I)+RM(I)*(ABS(VGSF(I))+ABS(VSS(I)))
            DSS(I) = RM(I)*ABS(VSS(I))
            DGSF(I) = RM(I)*ABS(VGSF(I))
C            IF(VGSF(I).GT.0.0D0)THEN
C D LN W/DR
C               DR = HRU(I) - HRU(I-1)
C               QLNWR = ABS(LOG(OMEGA(I))-LOG(OMEGA(I-1))/DR)
C CEILING SET BY DYNAMICAL SHEAR
C               QLNWRMAX = ABS(QWRMAX(I)/(WM(I)*RM(I)))
C TAKE THE SMALLER OF THE TWO
C               QLNWR = MIN(QLNWR,QLNWRMAX)
C               IF(QLNWR.GT.1.0D-32)VESD(I) = VESD(I)+ABS(VGSF(I)/QLNWR)
C            ENDIF
C            IF(VSS(I).GT.0.0D0)THEN
C               VESD(I) = VESD(I)+ABS(VSS(I)*RM(I))
C            ENDIF
         END DO
      ENDIF
C  AVERAGE PREVIOUS AND NEW VELOCITY ESTIMATES AFTER THE FIRST ITERATION.
      IF(IT.GT.1) THEN
         DO 70 I = IMIN,IMAX
            VGSF(I) = 0.5D0*(VGSF(I) + VGSF0(I))
            VES(I) = 0.5D0*(VES(I) + VES0(I))
            VSS(I) = 0.5D0*(VSS(I) + VSS0(I))
   70    CONTINUE
C MHP 11/94
         IF(LDIFAD)THEN
            DO I = IMIN,IMAX
               VESA(I) = 0.5D0*(VESA(I) + VESA0(I))
               VESD(I) = 0.5D0*(VESD(I) + VESD0(I))
            END DO
         ENDIF
      ENDIF
      DO 80 I =IMIN,IMAX
         HV(I) = VGSF(I) + VES(I) + VSS(I)
         IF(HV(I).LT.1.0D-20)HV(I)=0.0D0
         IF(HV(I).GT.0.0D0)LDO=.TRUE.
   80 CONTINUE
C 9/93 MIXING WITHOUT TRANSPORT ADDED.
C ZERO OUT COEFFICIENTS IN CORE TO AVOID NUMERICAL PROBLEMS IN
C THE H-BURNING SHELL.
      IF(LNOJ) THEN
         DO I = IMIN,IMAX
            DELL = ALM(I)/CLTOT
            IF(DELL.LT.9.9D-1)THEN
               HV(I) = 0.0D0
               VGSF(I) = 0.0D0
               VES(I) = 0.0D0
               VSS(I) = 0.0D0
C MHP 11/94
               VESA(I) = 0.0D0
               VESD(I) = 0.0D0
            ELSE
               GOTO 81
            ENDIF
         END DO
 81      CONTINUE
      ENDIF

      RETURN
      END
