C$$$$$$
C       SUBROUTINE MIXCZ(HCOMP,HS2,HS1,LCZ,HR,HP,HD,HG,M,IFSTCL)  ! KC 2025-05-31
      SUBROUTINE MIXCZ(HCOMP,HS2,LCZ,M)

      PARAMETER(JSON=5000)
      IMPLICIT REAL*8(A-H,O-Z)
      IMPLICIT LOGICAL*4(L)
      COMMON/FLAG/LEXCOM
      COMMON/COMP/XENV,ZENV,ZENVM,AMUENV,FXENV(12),XNEW,ZNEW,STOTAL,
     *     SENV
C JVS 02/12 COMMON BLOCKS ADDED FOR THE CALCULATION OF TAUCZ
      COMMON/DEUTER/DRATE(JSON),DRATE0(JSON),FMASSACC,JCZ
      COMMON/SCRTCH/SESUM(JSON),SEG(7,JSON),SBETA(JSON),SETA(JSON),
     * LOCONS(JSON),SO(JSON),SDEL(3,JSON),SFXION(3,JSON),SVEL(JSON),SCP(JSON)
      COMMON/CONST1/ CLN,CLNI,C4PI,C4PIL,C4PI3L,CC13,CC23,CPI

C END JVS
C MHP 02/12 ADDED ROTATION INFORMATION.  HG VECTOR IS NOT DEFINED FOR
C SPHERICAL MODELS AND IS USED FOR TAUCZ; ADDED INFORMATION SO THAT
C TAUCZ IS PROPERLY COMPUTED FOR SUCH MODELS.
      COMMON/ROT/WNEW,WALPCZ,ACFPFT,ITFP1,ITFP2,LROT,LINSTB,LWNEW
      COMMON/CONST2/CGAS,CA3,CA3L,CSIG,CSIGL,CGL,CMKH,CMKHN
      DIMENSION HCOMP(15,JSON),HS2(JSON),LCZ(JSON),MXZONE(24),XSUM(15)
C      *     XSUM(15), HR(JSON), HP(JSON), HD(JSON), HG(JSON), HS1(JSON)  ! KC 2025-05-31

C G Somers 6/14, ADDED IFSTCL TO THE ROUTINE CALL, STANDING
C FOR 'FIRST CALL'. THIS IS A BOOL THAT IS TRUE IF MIXCZ IS
C CALLED BEFORE MIDMOD, OR FALSE IF IT IS CALLED AFTER MIDMOD.
C THIS ALLOWS THE CORRECT GRADIENTS TO BE USED WHEN CALCULATING TAUCZ.
C THE COMMON BLOCK WITH THE NECESSARY VARIABLES IS IMPORTED HERE.
      COMMON/MDPHY/AMUM(JSON),CPM(JSON),DELM(JSON),DELAM(JSON),
     *             DELRM(JSON),ESUMM(JSON),OM(JSON),QDTM(JSON),
     *             THDIFM(JSON),VELM(JSON),VISCM(JSON),EPSM(JSON)
C G Somers END
C G Somers 3/17, ADDING NEW TAUCZ COMMON BLOCK
      COMMON/OVRTRN/LNEWTCZ,LCALCENV,TAUCZ,TAUCZ0,PPHOT,PPHOT0,FRACSTEP
      SAVE

C COMPUTE STANDARD CONVECTION ZONES
      J = 1
      LCC = .FALSE.
      MP1 = M + 1
      LCZ(MP1) = .FALSE.
      DO 11 I=1,MP1
      IF(.NOT.LCZ(I)) GO TO 10
C CONVECTION ZONE
      IF(LCC) GO TO 11
C START OF CONVECTION ZONE
      LCC = .TRUE.
      I1 = I
      GO TO 11
   10 IF(.NOT.LCC) GO TO 11
C   END OF CONVECTION ZONE
      LCC = .FALSE.
      MXZONE(J) = I1
      MXZONE(J+1) = I - 1
      J = J + 2
      IF(J.LT.24) GO TO 11
      GO TO 12
   11 CONTINUE
      MXZONE(J) = 0
   12 CONTINUE
      IEND = 11
      IF(LEXCOM) IEND = 15
C MIX ALL CONVECTIVE ZONES
      DO 100 J=1,24,2
         IF(MXZONE(J).LE.0) GO TO 110
         I1 = MXZONE(J)
         I2 = MIN0(M,MXZONE(J+1))
C   903    IF(I1.NE.1 .AND. I1.GE.I2) GOTO 100
         IF(I1.NE.1 .AND. I1.GE.I2) GOTO 100
C INITIALIZE SUMS
C   904    WTSUM = 0.0D0
         WTSUM = 0.0D0
         DO 40 I = 1,IEND
            XSUM(I) = 0.0D0
   40    CONTINUE
         DO 60 JJ = I1,I2
            WTSUM = WTSUM + HS2(JJ)
            DO 50 I = 1,IEND
               XSUM(I) = XSUM(I) + HCOMP(I,JJ)*HS2(JJ)
   50       CONTINUE
   60    CONTINUE
         DO 70 I = 1,IEND
            XSUM(I) = XSUM(I)/WTSUM
   70    CONTINUE
         DO 90 JJ = I1,I2
            DO 80 I = 1,IEND
               HCOMP(I,JJ) = XSUM(I)
   80       CONTINUE
   90    CONTINUE
  100 CONTINUE
  110 CONTINUE
C RENORMALIZE COMPOSITION IF NECESSARY
      DO 140 I = 1,M
         HCOMP(1,I) = DMAX1(HCOMP(1,I),0.0D0)
         HCOMP(3,I) = DMIN1(HCOMP(3,I),1.0D0-HCOMP(1,I))
         HCOMP(9,I) = DMAX1(HCOMP(9,I),0.99D-3*(HCOMP(3,I)-ZENVM))
  140 CONTINUE

C G Somers 3/17, COMMENTED OUT THIS TAUCZ CALCULATION. IT IS NOW PASSED
C IN IN THE OVRTRN COMMON BLOCK
C
C JVS 02/12 CALCULATE THE LOCAL CONVECTIVE OVERTURN TIMESCALE AT THE BASE
C OF THE CZ. IN OLDER VERSIONS THIS WAS ONLY DONE FOR ROTATING MODELS;
C THIS MAKES IT SO TAUCZ IS CALCULATED FOR ALL MODELS.
C THIS CODE SNAGGED FROM MIDMOD
C
CC  DETERMINE EXTENT OF SURFACE CONVECTION ZONE.
C      LALLCZ = .FALSE.
C      IF(LCZ(M))THEN
CC  SURFACE C.Z. EXISTS.  FIND LOWEST SHELL (IMAX), WHICH IS ALSO THE
CC  UPPERMOST ZONE CONSIDERED FOR STABILITY AGAINST ROTATIONALLY INDUCED MIXING.
C         DO 71 I = M-1,1,-1
C            IF(.NOT.LCZ(I)) GOTO 81
C   71    CONTINUE
C         LALLCZ = .TRUE.
C         I = 0
C   81    IMAX = I + 1
CC  HSTOP IS THE MASS AT THE TOP OF THE C.Z.
CC  HSBOT IS THE MASS AT THE BOTTOM OF THE C.Z.
C         HSTOP = EXP(CLN*STOTAL)
C         IF(IMAX.GT.1)THEN
C            HSBOT = 0.5D0*(HS1(IMAX)+HS1(IMAX-1))
C         ELSE
C            HSBOT = 0.0D0
C         ENDIF
CC  LCZSUR=T IF A SURFACE C.Z.DEEP ENOUGH FOR ANGULAR MOMENTUM LOSS EXISTS
C         IF((HSTOP-HSBOT)/CMSUN.GT.0.0D0)THEN
C            LCZSUR = .TRUE.
C         ELSE
C            LCZSUR= .FALSE.
C         ENDIF
C      ELSE
CC  NO SURFACE C.Z.
C         IMAX = M
C         LCZSUR = .FALSE.
C      ENDIF
C
C      IF(LCZSUR)THEN
C         IF(.NOT.LALLCZ)THEN
C            IF(.NOT.LROT)THEN
C               HG(IMAX)=HS1(IMAX)*EXP(CLN*(CGL-2.0D0*HR(IMAX)))
C               HG(IMAX-1)=HS1(IMAX-1)*EXP(CLN*(CGL-2.0D0*HR(IMAX-1)))
C            ENDIF
CC PINPOINT RCZ
CC G Somers 6/14, CHECK WHETHER THIS RUN OF MIXCZ OCCURED BEFORE
CC OR AFTER MIDMOD. IF BEFORE, USE SDEL. IF AFTER, USE THE UPDATED
CC VARIABLES DELRM AND DELAM.
C            IF(IFSTCL.EQ..TRUE.)THEN
C               DD2 = SDEL(1,IMAX-1)-SDEL(3,IMAX-1)
C               DD1 = SDEL(1,IMAX)-SDEL(3,IMAX)
C            ELSE
C               DD2 = DELRM(IMAX-1)-DELAM(IMAX-1)
C               DD1 = DELRM(IMAX)-DELAM(IMAX)
C            ENDIF
CC G Somers END
C            FX = DD2/(DD2-DD1)
CC INFER HP
C            ENVRL = HR(IMAX-1)+FX*(HR(IMAX)-HR(IMAX-1))
C            ENVR = EXP(CLN*ENVRL)
C            PS2 = EXP(CLN*(HP(IMAX)-HD(IMAX)))/HG(IMAX)
C            PS1 = EXP(CLN*(HP(IMAX-1)-HD(IMAX-1)))/HG(IMAX-1)
C            PSCA = PS1 + FX*(PS2-PS1)
C            RTESTL = DLOG10(ENVR+PSCA)
CC FIND V
C            DO K = IMAX+1,M
C               IF(HR(K).GT.RTESTL)THEN
C                  FX = (RTESTL-HR(K-1))/(HR(K)-HR(K-1))
C                  CVEL = SVEL(K-1)+FX*(SVEL(K)-SVEL(K-1))
C                  GOTO 85
C               ENDIF
C            END DO
C            CVEL = SVEL(M)
C 85         CONTINUE
CC DEFINE TAUCZ
C            TAUCZ = PSCA/CVEL
C         ELSE
CC INFER HP
C            IF(.NOT.LROT)THEN
C               HG(1)=HS1(1)*EXP(CLN*(CGL-2.0D0*HR(1)))
C            ENDIF
C            PSCA2 = EXP(CLN*(HP(1)-HD(1)))/HG(1)
C            RTEST2 = EXP(CLN*HR(1))
C            IF(PSCA2.LE.RTEST2)THEN
CC HP < R AT THE FIRST POINT.  ASSUME V CONSTANT INSIDE AND HP = K/R FOR
CC SLOWLY VARYING DENSITY AND PRESSURE NEAR THE CENTER.
C               CVEL = SVEL(1)
C               PSCA = (PSCA2*RTEST2)**0.5D0
C               TAUCZ = PSCA/CVEL
C            ELSE
C               DO K = 2,M
C                  PSCA1 = PSCA2
C                  RTEST1 = RTEST2
C                  IF(.NOT.LROT)THEN
C                     HG(K)=HS1(K)*EXP(CLN*(CGL-2.0D0*HR(K)))
C                  ENDIF
C                  PSCA2 = EXP(CLN*(HP(K)-HD(K)))/HG(K)
C                  RTEST2 = EXP(CLN*HR(K))
CC FIND LOCATION WHERE HP = R
C                  IF(PSCA2.LE.RTEST2)THEN
C                     FX = (RTEST1-PSCA1)/((PSCA2-RTEST2)-(PSCA1-RTEST1))
CC FIND V
C                     CVEL = SVEL(K-1)+FX*(SVEL(K)-SVEL(K-1))
C                     PSCA = PSCA1+FX*(PSCA2-PSCA1)
CC DEFINE TAUCZ
C                     TAUCZ = PSCA/CVEL
C                     GOTO 95
C                  ENDIF
C               END DO
C               K = M
C               CVEL = SVEL(M)
C               PSCA = PSCA2
C               TAUCZ = PSCA/CVEL
C 95            CONTINUE
C            ENDIF
C         ENDIF
C      ELSE
C         TAUCZ = 0.0D0
C      ENDIF

C END JVS

      RETURN
      END
